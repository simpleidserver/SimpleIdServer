// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleIdServer.IdServer.Store.EF;

#nullable disable

namespace SimpleIdServer.IdServer.PostgreMigrations.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20240722142834_SupportOpenidFederation")]
    partial class SupportOpenidFederation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiResourceRealm", b =>
                {
                    b.Property<string>("ApiResourcesId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("ApiResourcesId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("ApiResourceRealm");
                });

            modelBuilder.Entity("ApiResourceScope", b =>
                {
                    b.Property<string>("ApiResourcesId")
                        .HasColumnType("text");

                    b.Property<string>("ScopesId")
                        .HasColumnType("text");

                    b.HasKey("ApiResourcesId", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ApiResourceScope");
                });

            modelBuilder.Entity("AuthenticationContextClassReferenceRealm", b =>
                {
                    b.Property<string>("AuthenticationContextClassReferencesId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("AuthenticationContextClassReferencesId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("AuthenticationContextClassReferenceRealm");
                });

            modelBuilder.Entity("AuthenticationSchemeProviderRealm", b =>
                {
                    b.Property<string>("AuthenticationSchemeProvidersId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("AuthenticationSchemeProvidersId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("AuthenticationSchemeProviderRealm");
                });

            modelBuilder.Entity("CertificateAuthorityRealm", b =>
                {
                    b.Property<string>("CertificateAuthoritiesId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("CertificateAuthoritiesId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("CertificateAuthorityRealm");
                });

            modelBuilder.Entity("ClientRealm", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("ClientsId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("ClientRealm");
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.Property<string>("ClientsId")
                        .HasColumnType("text");

                    b.Property<string>("ScopesId")
                        .HasColumnType("text");

                    b.HasKey("ClientsId", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("ClientScope");
                });

            modelBuilder.Entity("ConfigurationDefinitionRecordTranslation", b =>
                {
                    b.Property<string>("ConfigurationDefinitionRecordId")
                        .HasColumnType("text");

                    b.Property<int>("TranslationsId")
                        .HasColumnType("integer");

                    b.HasKey("ConfigurationDefinitionRecordId", "TranslationsId");

                    b.HasIndex("TranslationsId");

                    b.ToTable("ConfigurationDefinitionRecordTranslation");
                });

            modelBuilder.Entity("ConfigurationDefinitionRecordValueTranslation", b =>
                {
                    b.Property<string>("ConfigurationDefinitionRecordValueId")
                        .HasColumnType("text");

                    b.Property<int>("TranslationsId")
                        .HasColumnType("integer");

                    b.HasKey("ConfigurationDefinitionRecordValueId", "TranslationsId");

                    b.HasIndex("TranslationsId");

                    b.ToTable("ConfigurationDefinitionRecordValueTranslation");
                });

            modelBuilder.Entity("GroupScope", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("text");

                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.HasKey("GroupsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("GroupScope");
                });

            modelBuilder.Entity("IdentityProvisioningRealm", b =>
                {
                    b.Property<string>("IdentityProvisioningLstId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("IdentityProvisioningLstId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("IdentityProvisioningRealm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("RealmScope", b =>
                {
                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.Property<string>("ScopesId")
                        .HasColumnType("text");

                    b.HasKey("RealmsName", "ScopesId");

                    b.HasIndex("ScopesId");

                    b.ToTable("RealmScope");
                });

            modelBuilder.Entity("RealmSerializedFileKey", b =>
                {
                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.Property<string>("SerializedFileKeysId")
                        .HasColumnType("text");

                    b.HasKey("RealmsName", "SerializedFileKeysId");

                    b.HasIndex("SerializedFileKeysId");

                    b.ToTable("RealmSerializedFileKey");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ApiResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Audience")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "aud");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Id");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuditEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AuthMethod")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_method");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "claims");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "error_message");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<bool>("IsError")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_error");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "realm");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_url");

                    b.Property<string>("RequestJSON")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "request_json");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.ToTable("AuditEvents");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AuthenticationMethodReferences")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "amrs");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("RegistrationWorkflowId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "workflow_id");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationWorkflowId");

                    b.ToTable("Acrs");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthSchemeProviderDefinitionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthSchemeProviderDefinitionName");

                    b.ToTable("AuthenticationSchemeProviders");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProviderDefinition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("HandlerFullQualifiedName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "handler_full_qualifiedname");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "img");

                    b.Property<string>("OptionsFullQualifiedName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "options_full_qualifiedname");

                    b.Property<string>("OptionsName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "options_name");

                    b.HasKey("Name");

                    b.ToTable("AuthenticationSchemeProviderDefinitions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProviderMapper", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IdProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapperType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceClaimName")
                        .HasColumnType("text");

                    b.Property<string>("TargetUserAttribute")
                        .HasColumnType("text");

                    b.Property<string>("TargetUserProperty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdProviderId");

                    b.ToTable("AuthenticationSchemeProviderMapper");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Audience")
                        .HasColumnType("text");

                    b.Property<int?>("AuthorizedScopeId")
                        .HasColumnType("integer");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedScopeId");

                    b.ToTable("AuthorizedResource");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConsentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scope");

                    b.HasKey("Id");

                    b.HasIndex("ConsentId");

                    b.ToTable("AuthorizedScope");

                    b.HasAnnotation("Relational:JsonPropertyName", "scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Interval")
                        .HasColumnType("integer");

                    b.Property<int>("LastStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextFetchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotificationEdp")
                        .HasColumnType("text");

                    b.Property<string>("NotificationMode")
                        .HasColumnType("text");

                    b.Property<string>("NotificationToken")
                        .HasColumnType("text");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RejectionSentDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerializedAuthorizationDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BCAuthorizeLst");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorizeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BCAuthorizeId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BCAuthorizeId");

                    b.ToTable("BCAuthorizeHistory");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.CertificateAuthority", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "end_datetime");

                    b.Property<int?>("FindType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "find_type");

                    b.Property<string>("FindValue")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "find_value");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "private_key");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "public_key");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "start_datetime");

                    b.Property<int?>("StoreLocation")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "store_location");

                    b.Property<int?>("StoreName")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "store_name");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subject_name");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Id");

                    b.ToTable("CertificateAuthorities");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClaimProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ClaimType")
                        .HasColumnType("integer");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClaimProviders");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "access_token_type");

                    b.Property<string>("ApplicationType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "application_type");

                    b.Property<int>("AuthReqIdExpirationTimeInSeconds")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_reqid_expirationtime");

                    b.Property<string>("AuthenticationContextClassReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationDataTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorization_data_types");

                    b.Property<string>("AuthorizationEncryptedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorization_encrypted_response_alg");

                    b.Property<string>("AuthorizationEncryptedResponseEnc")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorization_encrypted_response_enc");

                    b.Property<string>("AuthorizationSignedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "authorization_signed_response_alg");

                    b.Property<string>("BCAuthenticationRequestSigningAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_authentication_request_signing_alg");

                    b.Property<string>("BCClientNotificationEndpoint")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_client_notification_endpoint");

                    b.Property<int>("BCIntervalSeconds")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "bc_interval");

                    b.Property<string>("BCTokenDeliveryMode")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_token_delivery_mode");

                    b.Property<bool>("BCUserCodeParameter")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_user_code_parameter");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "backchannel_logout_uri");

                    b.Property<double?>("CNonceExpirationTimeInSeconds")
                        .HasColumnType("double precision");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<string>("ClientRegistrationTypesSupported")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_registration_types_supported");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret");

                    b.Property<DateTime?>("ClientSecretExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "client_secret_expires_at");

                    b.Property<string>("ClientType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_type");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "contacts");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("CredentialOfferEndpoint")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "credential_offer_endpoint");

                    b.Property<bool>("DPOPBoundAccessTokens")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "dpop_bound_access_tokens");

                    b.Property<double>("DPOPNonceLifetimeInSeconds")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "dpop_lifetime");

                    b.Property<string>("DefaultAcrValues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "default_acr_values");

                    b.Property<double?>("DefaultMaxAge")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "default_max_age");

                    b.Property<DateTime?>("ExpirationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "expiration_datetime");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "frontchannel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "frontchannel_logout_uri");

                    b.Property<string>("GrantTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "grant_types");

                    b.Property<string>("IdTokenEncryptedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_encrypted_response_alg");

                    b.Property<string>("IdTokenEncryptedResponseEnc")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_encrypted_response_enc");

                    b.Property<string>("IdTokenSignedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id_token_signed_response_alg");

                    b.Property<string>("InitiateLoginUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "initiate_login_uri");

                    b.Property<bool>("IsConsentDisabled")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_consent_disabled");

                    b.Property<bool>("IsDPOPNonceRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "dpop_nonce_required");

                    b.Property<bool>("IsRedirectUrlCaseSensitive")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_redirect_url_casesensitive");

                    b.Property<bool>("IsResourceParameterRequired")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_resource_parameter_required");

                    b.Property<bool>("IsSelfIssueEnabled")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_self_issue_enabled");

                    b.Property<bool>("IsTokenExchangeEnabled")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_token_exchange_enabled");

                    b.Property<bool>("IsTransactionCodeRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("JwksUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "jwks_uri");

                    b.Property<string>("PairWiseIdentifierSalt")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "post_logout_redirect_uris");

                    b.Property<double>("PreAuthCodeExpirationTimeInSeconds")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "pre_auth_code_expiration_time");

                    b.Property<string>("PreferredTokenProfile")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "preferred_token_profile");

                    b.Property<bool>("RedirectToRevokeSessionUI")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_revoke_session_ui");

                    b.Property<string>("RedirectionUrls")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "redirect_uris");

                    b.Property<double?>("RefreshTokenExpirationTimeInSeconds")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "refresh_token_expiration_time_seconds");

                    b.Property<string>("RegistrationAccessToken")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "registration_access_token");

                    b.Property<string>("RequestObjectEncryptionAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_encryption_alg");

                    b.Property<string>("RequestObjectEncryptionEnc")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_encryption_enc");

                    b.Property<string>("RequestObjectSigningAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "request_object_signing_alg");

                    b.Property<bool>("RequireAuthTime")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "require_auth_time");

                    b.Property<string>("ResponseTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "response_types");

                    b.Property<string>("SectorIdentifierUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "sector_identifier_uri");

                    b.Property<string>("SerializedParameters")
                        .HasColumnType("text");

                    b.Property<string>("SoftwareId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "software_id");

                    b.Property<string>("SoftwareVersion")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "software_version");

                    b.Property<string>("SubjectSyntaxTypesSupported")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subject_syntax_types_supported");

                    b.Property<string>("SubjectType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "subject_type");

                    b.Property<string>("TlsClientAuthSanDNS")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_dns");

                    b.Property<string>("TlsClientAuthSanEmail")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_email");

                    b.Property<string>("TlsClientAuthSanIP")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_ip");

                    b.Property<string>("TlsClientAuthSanURI")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_san_uri");

                    b.Property<string>("TlsClientAuthSubjectDN")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_auth_subject_dn");

                    b.Property<bool>("TlsClientCertificateBoundAccessToken")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "tls_client_certificate_bound_access_token");

                    b.Property<string>("TokenEncryptedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_encrypted_response_alg");

                    b.Property<string>("TokenEncryptedResponseEnc")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_encrypted_response_enc");

                    b.Property<string>("TokenEndPointAuthMethod")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_endpoint_auth_method");

                    b.Property<int?>("TokenExchangeType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "token_exchange_type");

                    b.Property<double?>("TokenExpirationTimeInSeconds")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "token_expiration_time_seconds");

                    b.Property<string>("TokenSignedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "token_signed_response_alg");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.Property<string>("UserInfoEncryptedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_encrypted_response_alg");

                    b.Property<string>("UserInfoEncryptedResponseEnc")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_encrypted_response_enc");

                    b.Property<string>("UserInfoSignedResponseAlg")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "userinfo_signed_response_alg");

                    b.HasKey("Id");

                    b.HasIndex("AuthenticationContextClassReferenceId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CertificateAuthorityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "end_datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "private_key");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "public_key");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "start_datetime");

                    b.HasKey("Id");

                    b.HasIndex("CertificateAuthorityId");

                    b.ToTable("ClientCertificate");

                    b.HasAnnotation("Relational:JsonPropertyName", "client_certificates");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientJsonWebKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "alg");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<int?>("KeyType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "key_type");

                    b.Property<string>("Kid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "kid");

                    b.Property<string>("SerializedJsonWebKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "serialized_jwk");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "usage");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientJsonWebKey");

                    b.HasAnnotation("Relational:JsonPropertyName", "serialized_jwks");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullQualifiedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Definitions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationDefinitionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayCondition")
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationDefinitionId");

                    b.ToTable("ConfigurationDefinitionRecord");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecordValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationDefinitionRecordId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationDefinitionRecordId");

                    b.ToTable("ConfigurationDefinitionRecordValue");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationKeyPairValueRecord", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("ConfigurationKeyPairValueRecords");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Consent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "claims");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "client_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScopeId")
                        .HasColumnType("text");

                    b.Property<string>("SerializedAuthorizationDetails")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UserId");

                    b.ToTable("Grants");

                    b.HasAnnotation("Relational:JsonPropertyName", "consents");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.DeviceAuthCode", b =>
                {
                    b.Property<string>("DeviceCode")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastAccessTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextAccessDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserLogin")
                        .HasColumnType("text");

                    b.HasKey("DeviceCode");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceAuthCodes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ExtractedRepresentation", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExternalId");

                    b.ToTable("ExtractedRepresentations");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ExtractedRepresentationStaging", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GroupIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdProvisioningProcessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepresentationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepresentationVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Values")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExtractedRepresentationsStaging");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.GotifySession", b =>
                {
                    b.Property<string>("ApplicationToken")
                        .HasColumnType("text");

                    b.Property<string>("ClientToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ApplicationToken");

                    b.ToTable("GotifySessions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "full_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("ParentGroupId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_group_id");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Groups");

                    b.HasAnnotation("Relational:JsonPropertyName", "group");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.GroupRealm", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("GroupsId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("GroupRealm");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.GroupUser", b =>
                {
                    b.Property<string>("GroupsId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");

                    b.HasAnnotation("Relational:JsonPropertyName", "groups");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioning", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefinitionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionName");

                    b.ToTable("IdentityProvisioningLst");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningDefinition", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("OptionsFullQualifiedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OptionsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Name");

                    b.ToTable("IdentityProvisioningDefinitions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentPage")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentityProvisioningId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NbFilteredRepresentations")
                        .HasColumnType("integer");

                    b.Property<int>("NbGroups")
                        .HasColumnType("integer");

                    b.Property<int>("NbUsers")
                        .HasColumnType("integer");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPages")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProvisioningId");

                    b.ToTable("IdentityProvisioningHistory");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningMappingRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasMultipleAttribute")
                        .HasColumnType("boolean");

                    b.Property<string>("IdentityProvisioningDefinitionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapperType")
                        .HasColumnType("integer");

                    b.Property<string>("TargetUserAttribute")
                        .HasColumnType("text");

                    b.Property<string>("TargetUserProperty")
                        .HasColumnType("text");

                    b.Property<int>("Usage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProvisioningDefinitionName");

                    b.ToTable("IdentityProvisioningMappingRule");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Code");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.MessageBusErrorMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exceptions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MessageBusErrorMessages");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Purpose")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "purpose");

                    b.Property<string>("RealmName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RealmName");

                    b.ToTable("PresentationDefinitions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionFormat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PresentationDefinitionInputDescriptorId")
                        .HasColumnType("text");

                    b.Property<string>("ProofType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PresentationDefinitionInputDescriptorId");

                    b.ToTable("PresentationDefinitionFormat");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PresentationDefinitionId")
                        .HasColumnType("text");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Purpose")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "purpose");

                    b.HasKey("Id");

                    b.HasIndex("PresentationDefinitionId");

                    b.ToTable("PresentationDefinitionInputDescriptor");

                    b.HasAnnotation("Relational:JsonPropertyName", "input_descriptors");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptorConstraint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PresentationDefinitionInputDescriptorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PresentationDefinitionInputDescriptorId");

                    b.ToTable("PresentationDefinitionInputDescriptorConstraint");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Realm", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Name");

                    b.ToTable("Realms");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.RealmUser", b =>
                {
                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.Property<string>("RealmsName")
                        .HasColumnType("text");

                    b.HasKey("UsersId", "RealmsName");

                    b.HasIndex("RealmsName");

                    b.ToTable("RealmUser");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.RegistrationWorkflow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("RealmName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RealmName");

                    b.ToTable("RegistrationWorkflows");

                    b.HasAnnotation("Relational:JsonPropertyName", "registration_workflow");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Scope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<bool>("IsExposedInConfigurationEdp")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_exposed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Protocol")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "protocol");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "update_datetime");

                    b.HasKey("Id");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ScopeClaimMapper", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("IncludeInAccessToken")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "include_in_accesstoken");

                    b.Property<bool>("IsMultiValued")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_multivalued");

                    b.Property<int>("MapperType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "mapper_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("SAMLAttributeName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "saml_attribute_name");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceUserAttribute")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "source_user_attribute");

                    b.Property<string>("SourceUserProperty")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "source_user_property");

                    b.Property<string>("TargetClaimPath")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "target_claim_path");

                    b.Property<int?>("TokenClaimJsonType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "token_claim_json_type");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("ScopeClaimMapper");

                    b.HasAnnotation("Relational:JsonPropertyName", "mappers");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.SerializedFileKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Enc")
                        .HasColumnType("text");

                    b.Property<bool>("IsSymmetric")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Key")
                        .HasColumnType("bytea");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrivateKeyPem")
                        .HasColumnType("text");

                    b.Property<string>("PublicKeyPem")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SerializedFileKeys");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Token", b =>
                {
                    b.Property<int>("PkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PkID"));

                    b.Property<int?>("AccessTokenType")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrantId")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Jkt")
                        .HasColumnType("text");

                    b.Property<string>("OriginalData")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PkID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPendingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requester")
                        .HasColumnType("text");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("UmaPendingRequest");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UMAPermissionTicket");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicketRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UMAPermissionTicketId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UMAPermissionTicketId");

                    b.ToTable("UMAPermissionTicketRecord");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("IconUri")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "icon_uri");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_scopes");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UmaResources");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scopes");

                    b.Property<string>("UMAResourceId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UMAResourceId");

                    b.ToTable("UMAResourcePermission");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermissionClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "claim_type");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "friendly_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("UMAResourcePermissionId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("UMAResourcePermissionId");

                    b.ToTable("UMAResourcePermissionClaim");

                    b.HasAnnotation("Relational:JsonPropertyName", "claims");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "createDateTime");

                    b.Property<string>("DeviceRegistrationToken")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "device_registration_token");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "emailVerified");

                    b.Property<string>("EncodedPicture")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "firstname");

                    b.Property<string>("IdentityProvisioningId")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("NbLoginAttempt")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "nb_login_attempt");

                    b.Property<string>("NotificationMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "notification_mode");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime?>("UnblockDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "unblock_datetime");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updateDateTime");

                    b.HasKey("Id");

                    b.HasIndex("IdentityProvisioningId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserClaim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasAnnotation("Relational:JsonPropertyName", "claims");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserCredential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<int>("HOTPWindow")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "hotp_window");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "active");

                    b.Property<int?>("OTPAlg")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "otp_alg");

                    b.Property<int>("OTPCounter")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "otp_counter");

                    b.Property<int>("TOTPStep")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "totp_step");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCredential");

                    b.HasAnnotation("Relational:JsonPropertyName", "credentials");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PushToken")
                        .HasColumnType("text");

                    b.Property<string>("PushType")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevice");

                    b.HasAnnotation("Relational:JsonPropertyName", "devices");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserExternalAuthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "scheme");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "sub");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExternalAuthProvider");

                    b.HasAnnotation("Relational:JsonPropertyName", "external_auth_providers");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "session_id");

                    b.Property<DateTime>("AuthenticationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "auth_datetime");

                    b.Property<DateTime>("ExpirationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "exp_datetime");

                    b.Property<bool>("IsClientsNotified")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_clients_notified");

                    b.Property<string>("Realm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "realm");

                    b.Property<string>("SerializedClientIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "state");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSession");

                    b.HasAnnotation("Relational:JsonPropertyName", "sessions");
                });

            modelBuilder.Entity("SimpleIdServer.OpenidFederation.Domains.FederationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "create_datetime");

                    b.Property<bool>("IsSubordinate")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_subordinate");

                    b.Property<string>("Realm")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "realm");

                    b.Property<string>("Sub")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "sub");

                    b.HasKey("Id");

                    b.ToTable("FederationEntities");
                });

            modelBuilder.Entity("TranslationUMAResource", b =>
                {
                    b.Property<int>("TranslationsId")
                        .HasColumnType("integer");

                    b.Property<string>("UMAResourceId")
                        .HasColumnType("text");

                    b.HasKey("TranslationsId", "UMAResourceId");

                    b.HasIndex("UMAResourceId");

                    b.ToTable("TranslationUMAResource");
                });

            modelBuilder.Entity("ApiResourceRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ApiResource", null)
                        .WithMany()
                        .HasForeignKey("ApiResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiResourceScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ApiResource", null)
                        .WithMany()
                        .HasForeignKey("ApiResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationContextClassReferenceRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationContextClassReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationSchemeProviderRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationSchemeProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CertificateAuthorityRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.CertificateAuthority", null)
                        .WithMany()
                        .HasForeignKey("CertificateAuthoritiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfigurationDefinitionRecordTranslation", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecord", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationDefinitionRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Translation", null)
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConfigurationDefinitionRecordValueTranslation", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecordValue", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationDefinitionRecordValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Translation", null)
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityProvisioningRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.IdentityProvisioning", null)
                        .WithMany()
                        .HasForeignKey("IdentityProvisioningLstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany()
                        .HasForeignKey("ScopesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmSerializedFileKey", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", null)
                        .WithMany()
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.SerializedFileKey", null)
                        .WithMany()
                        .HasForeignKey("SerializedFileKeysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.RegistrationWorkflow", "RegistrationWorkflow")
                        .WithMany("Acrs")
                        .HasForeignKey("RegistrationWorkflowId");

                    b.Navigation("RegistrationWorkflow");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProviderDefinition", "AuthSchemeProviderDefinition")
                        .WithMany("AuthSchemeProviders")
                        .HasForeignKey("AuthSchemeProviderDefinitionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthSchemeProviderDefinition");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProviderMapper", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", "IdProvider")
                        .WithMany("Mappers")
                        .HasForeignKey("IdProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdProvider");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedResource", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthorizedScope", null)
                        .WithMany("AuthorizedResources")
                        .HasForeignKey("AuthorizedScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedScope", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Consent", "Consent")
                        .WithMany("Scopes")
                        .HasForeignKey("ConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consent");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorizeHistory", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.BCAuthorize", null)
                        .WithMany("Histories")
                        .HasForeignKey("BCAuthorizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Client", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", null)
                        .WithMany("Clients")
                        .HasForeignKey("AuthenticationContextClassReferenceId");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientCertificate", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.CertificateAuthority", "CertificateAuthority")
                        .WithMany("ClientCertificates")
                        .HasForeignKey("CertificateAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateAuthority");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ClientJsonWebKey", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany("SerializedJsonWebKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecord", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ConfigurationDefinition", null)
                        .WithMany("Records")
                        .HasForeignKey("ConfigurationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecordValue", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecord", null)
                        .WithMany("Values")
                        .HasForeignKey("ConfigurationDefinitionRecordId");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Consent", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", null)
                        .WithMany("Consents")
                        .HasForeignKey("ScopeId");

                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Consents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.DeviceAuthCode", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", "Client")
                        .WithMany("DeviceAuthCodes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Group", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Group", "ParentGroup")
                        .WithMany("Children")
                        .HasForeignKey("ParentGroupId");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.GroupRealm", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Group", "Group")
                        .WithMany("Realms")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", "Realm")
                        .WithMany("Groups")
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.GroupUser", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioning", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.IdentityProvisioningDefinition", "Definition")
                        .WithMany("Instances")
                        .HasForeignKey("DefinitionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningHistory", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.IdentityProvisioning", "IdentityProvisioning")
                        .WithMany("Histories")
                        .HasForeignKey("IdentityProvisioningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProvisioning");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningMappingRule", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.IdentityProvisioningDefinition", "IdentityProvisioningDefinition")
                        .WithMany("MappingRules")
                        .HasForeignKey("IdentityProvisioningDefinitionName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityProvisioningDefinition");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinition", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", "Realm")
                        .WithMany("PresentationDefinitions")
                        .HasForeignKey("RealmName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionFormat", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptor", null)
                        .WithMany("Format")
                        .HasForeignKey("PresentationDefinitionInputDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptor", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.PresentationDefinition", null)
                        .WithMany("InputDescriptors")
                        .HasForeignKey("PresentationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptorConstraint", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptor", null)
                        .WithMany("Constraints")
                        .HasForeignKey("PresentationDefinitionInputDescriptorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.RealmUser", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", "Realm")
                        .WithMany("Users")
                        .HasForeignKey("RealmsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Realms")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.RegistrationWorkflow", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Realm", "Realm")
                        .WithMany("RegistrationWorkflows")
                        .HasForeignKey("RealmName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ScopeClaimMapper", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Scope", "Scope")
                        .WithMany("ClaimMappers")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Translation", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Client", null)
                        .WithMany("Translations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPendingRequest", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicketRecord", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", null)
                        .WithMany("Records")
                        .HasForeignKey("UMAPermissionTicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UMAResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermissionClaim", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResourcePermission", null)
                        .WithMany("Claims")
                        .HasForeignKey("UMAResourcePermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.User", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.IdentityProvisioning", "IdentityProvisioning")
                        .WithMany("Users")
                        .HasForeignKey("IdentityProvisioningId");

                    b.Navigation("IdentityProvisioning");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserClaim", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("OAuthUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserCredential", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserDevice", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserExternalAuthProvider", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("ExternalAuthProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UserSession", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TranslationUMAResource", b =>
                {
                    b.HasOne("SimpleIdServer.IdServer.Domains.Translation", null)
                        .WithMany()
                        .HasForeignKey("TranslationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleIdServer.IdServer.Domains.UMAResource", null)
                        .WithMany()
                        .HasForeignKey("UMAResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationContextClassReference", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProvider", b =>
                {
                    b.Navigation("Mappers");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthenticationSchemeProviderDefinition", b =>
                {
                    b.Navigation("AuthSchemeProviders");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.AuthorizedScope", b =>
                {
                    b.Navigation("AuthorizedResources");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.BCAuthorize", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.CertificateAuthority", b =>
                {
                    b.Navigation("ClientCertificates");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Client", b =>
                {
                    b.Navigation("DeviceAuthCodes");

                    b.Navigation("SerializedJsonWebKeys");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinition", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.ConfigurationDefinitionRecord", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Consent", b =>
                {
                    b.Navigation("Scopes");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Group", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Realms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioning", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.IdentityProvisioningDefinition", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("MappingRules");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinition", b =>
                {
                    b.Navigation("InputDescriptors");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.PresentationDefinitionInputDescriptor", b =>
                {
                    b.Navigation("Constraints");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Realm", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("PresentationDefinitions");

                    b.Navigation("RegistrationWorkflows");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.RegistrationWorkflow", b =>
                {
                    b.Navigation("Acrs");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.Scope", b =>
                {
                    b.Navigation("ClaimMappers");

                    b.Navigation("Consents");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAPermissionTicket", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.UMAResourcePermission", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("SimpleIdServer.IdServer.Domains.User", b =>
                {
                    b.Navigation("Consents");

                    b.Navigation("Credentials");

                    b.Navigation("Devices");

                    b.Navigation("ExternalAuthProviders");

                    b.Navigation("Groups");

                    b.Navigation("OAuthUserClaims");

                    b.Navigation("Realms");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
