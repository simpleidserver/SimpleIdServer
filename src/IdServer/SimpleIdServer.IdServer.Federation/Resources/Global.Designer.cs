//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleIdServer.IdServer.Federation.Resources {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Global {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Global() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SimpleIdServer.IdServer.Federation.Resources.Global", typeof(Global).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the client registration type {0} is not supported by the RP.
        /// </summary>
        internal static string ClientRegistrationTypeNotSupported {
            get {
                return ResourceManager.GetString("ClientRegistrationTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the client_registration_types must be specified by the RP entity statement.
        /// </summary>
        internal static string ClientRegistrationTypesMustBeSpecified {
            get {
                return ResourceManager.GetString("ClientRegistrationTypesMustBeSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à federation entity already exists.
        /// </summary>
        internal static string FederationEntityAlreadyExists {
            get {
                return ResourceManager.GetString("FederationEntityAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the federation entity doesn&apos;t exist.
        /// </summary>
        internal static string FederationEntityUnknown {
            get {
                return ResourceManager.GetString("FederationEntityUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the issuer is not valid.
        /// </summary>
        internal static string InvalidIssuer {
            get {
                return ResourceManager.GetString("InvalidIssuer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the openid_relying_party doesn&apos;t exist in the entity statement.
        /// </summary>
        internal static string MissingOpenidRpInEntityStatement {
            get {
                return ResourceManager.GetString("MissingOpenidRpInEntityStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à no trust anchor can be resolved.
        /// </summary>
        internal static string NoTrustAnchorCanBeResolved {
            get {
                return ResourceManager.GetString("NoTrustAnchorCanBeResolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à only entity statement is supported.
        /// </summary>
        internal static string OnlyEntityStatementIsSupported {
            get {
                return ResourceManager.GetString("OnlyEntityStatementIsSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à only the following authentication methods {0} are supported.
        /// </summary>
        internal static string OnlyFollowingAuthMethodsAreSupported {
            get {
                return ResourceManager.GetString("OnlyFollowingAuthMethodsAreSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à the openid-federation cannot be resolved.
        /// </summary>
        internal static string OpenidFederationCannotBeResolved {
            get {
                return ResourceManager.GetString("OpenidFederationCannotBeResolved", resourceCulture);
            }
        }
    }
}
