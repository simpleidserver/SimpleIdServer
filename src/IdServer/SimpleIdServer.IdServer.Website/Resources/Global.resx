<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiResourceAlreadyExists" xml:space="preserve">
    <value>API Resource with the name '{0}' already exists</value>
  </data>
  <data name="CannotReadCertificateStore" xml:space="preserve">
    <value>You don't have the permission to read the certificate store</value>
  </data>
  <data name="CertificateAuthoritySaved" xml:space="preserve">
    <value>Certificate Authority has been saved</value>
  </data>
  <data name="CertificateDoesntExist" xml:space="preserve">
    <value>The certificate doesn't exist</value>
  </data>
  <data name="CertificateDoesntHavePrivateKey" xml:space="preserve">
    <value>The certificate doesn't contain private key</value>
  </data>
  <data name="ClientAdded" xml:space="preserve">
    <value>The client '{0}' has successfully been added</value>
  </data>
  <data name="ClientAlreadyExists" xml:space="preserve">
    <value>Client cannot be added because an another client exists with the same name</value>
  </data>
  <data name="ClientCertificateAdded" xml:space="preserve">
    <value>Client Certificate has been added</value>
  </data>
  <data name="ClientCredentialsUpdated" xml:space="preserve">
    <value>Client credentials are updated</value>
  </data>
  <data name="ClientRoleAdded" xml:space="preserve">
    <value>Client role has been added</value>
  </data>
  <data name="ClientScopesAdded" xml:space="preserve">
    <value>Client scopes have been added</value>
  </data>
  <data name="ClientSettingsUpdated" xml:space="preserve">
    <value>Client settings have been updated</value>
  </data>
  <data name="EncKeyAdded" xml:space="preserve">
    <value>Encryption key has been added</value>
  </data>
  <data name="ExternalAuthProviderUnlinked" xml:space="preserve">
    <value>External authentication provider has been unlinked</value>
  </data>
  <data name="GroupAdded" xml:space="preserve">
    <value>Group has been added</value>
  </data>
  <data name="GroupAlreadyExists" xml:space="preserve">
    <value>Group with the name {0} already exists</value>
  </data>
  <data name="GroupMemberAdded" xml:space="preserve">
    <value>Member has been added</value>
  </data>
  <data name="GroupMembersRemoved" xml:space="preserve">
    <value>Selected members have been removed</value>
  </data>
  <data name="GroupRolesAdded" xml:space="preserve">
    <value>Roles have been added</value>
  </data>
  <data name="GroupRolesRemoved" xml:space="preserve">
    <value>Selected group roles have been removed</value>
  </data>
  <data name="IdentityProvisioningLaunched" xml:space="preserve">
    <value>Identity Provisioning is launched</value>
  </data>
  <data name="IdProviderAdded" xml:space="preserve">
    <value>Identity Provider has been added</value>
  </data>
  <data name="IdProviderDetailsUpdated" xml:space="preserve">
    <value>Identity Provider details have been updated</value>
  </data>
  <data name="IdProviderExists" xml:space="preserve">
    <value>An Identity Provider named '{0}' already exists</value>
  </data>
  <data name="IdProviderMapperAdded" xml:space="preserve">
    <value>Mapper rule has been added</value>
  </data>
  <data name="IdProviderMapperUpdated" xml:space="preserve">
    <value>Mapper has been updated</value>
  </data>
  <data name="IdProviderPropertiesUpdated" xml:space="preserve">
    <value>Identity Provider Properties have been updated</value>
  </data>
  <data name="IdProvisioningDetailsUpdated" xml:space="preserve">
    <value>Details have been updated</value>
  </data>
  <data name="IdProvisioningMappingRuleAdded" xml:space="preserve">
    <value>Mapping rule has been added</value>
  </data>
  <data name="IdProvisioningPropertiesUpdated" xml:space="preserve">
    <value>Properties have been updated</value>
  </data>
  <data name="ImportLaunched" xml:space="preserve">
    <value>Import is launched</value>
  </data>
  <data name="InvalidRedirectUrl" xml:space="preserve">
    <value>Redirection url '{0}' is not valid</value>
  </data>
  <data name="JWKSUrlUpdated" xml:space="preserve">
    <value>JWKS Url has been updated</value>
  </data>
  <data name="NameIsRequired" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="RealmAdded" xml:space="preserve">
    <value>Realms has been added</value>
  </data>
  <data name="RealmExists" xml:space="preserve">
    <value>Realm {0} already exists</value>
  </data>
  <data name="RedirectUriContainsFragment" xml:space="preserve">
    <value>Redirection url '{0}' cannot contains fragment (#)</value>
  </data>
  <data name="ScopeAdded" xml:space="preserve">
    <value>Scope '{0}' is added</value>
  </data>
  <data name="ScopeAlreadyExists" xml:space="preserve">
    <value>Resource with the name '{0}' already exists</value>
  </data>
  <data name="ScopeClaimMapperAdded" xml:space="preserve">
    <value>Claim mapper has been added</value>
  </data>
  <data name="ScopeClaimMapperNameMustBeUnique" xml:space="preserve">
    <value>Name must be unique</value>
  </data>
  <data name="ScopeClaimMapperSAMLAttributeNameMustBeUnique" xml:space="preserve">
    <value>SAML Attribute Name must be unique</value>
  </data>
  <data name="ScopeClaimMapperTokenClaimNameMustBeUnique" xml:space="preserve">
    <value>Token Claim Name must be unique</value>
  </data>
  <data name="ScopeClaimMapperUpdated" xml:space="preserve">
    <value>Scope Claim Mapper has been updated</value>
  </data>
  <data name="ScopeDetailsUpdated" xml:space="preserve">
    <value>Scope details have been updated</value>
  </data>
  <data name="ScopeResourceAdded" xml:space="preserve">
    <value>Scope resource is added</value>
  </data>
  <data name="ScopeResourcesUpdated" xml:space="preserve">
    <value>Scope Resources have been updated</value>
  </data>
  <data name="SelectedCertificateAuthoritiesRemoved" xml:space="preserve">
    <value>Selected Certificate Authorities has been removed</value>
  </data>
  <data name="SelectedClientCertificatesRemoved" xml:space="preserve">
    <value>Selected Client Certificates have been removed</value>
  </data>
  <data name="SelectedClientKeysRemoved" xml:space="preserve">
    <value>Selected client keys have been removed</value>
  </data>
  <data name="SelectedClientRolesRemoved" xml:space="preserve">
    <value>Selected client roles have been removed</value>
  </data>
  <data name="SelectedClientScopesRemoved" xml:space="preserve">
    <value>Selected client scopes have been removed</value>
  </data>
  <data name="SelectedClientsRemoved" xml:space="preserve">
    <value>Selected clients have been removed</value>
  </data>
  <data name="SelectedGrantsRemoved" xml:space="preserve">
    <value>Selected grants have been rejected</value>
  </data>
  <data name="SelectedGroupsRemoved" xml:space="preserve">
    <value>Selected groups have been removed</value>
  </data>
  <data name="SelectedIdentityProvisioningMappingRulesRemoved" xml:space="preserve">
    <value>Mapping rules have been removed</value>
  </data>
  <data name="SelectedIdentityProvisioningRemoved" xml:space="preserve">
    <value>Selected Identity Provisioning has been removed</value>
  </data>
  <data name="SelectedIdProviderMappersRemoved" xml:space="preserve">
    <value>Selected mappers have been removed</value>
  </data>
  <data name="SelectedIdProvidersRemoved" xml:space="preserve">
    <value>Selected Identity Providers have been removed</value>
  </data>
  <data name="SelectedScopesMappersRemoved" xml:space="preserve">
    <value>Scope mappers have been removed</value>
  </data>
  <data name="SelectedScopesRemoved" xml:space="preserve">
    <value>Selected scopes have been removed</value>
  </data>
  <data name="SigKeyAdded" xml:space="preserve">
    <value>Signature key has been added</value>
  </data>
  <data name="SigKeyAlreadyExists" xml:space="preserve">
    <value>Signature key '{0}' already exists</value>
  </data>
  <data name="UnknownClient" xml:space="preserve">
    <value>The client '{0}' doesn't exist</value>
  </data>
  <data name="UnknownGroup" xml:space="preserve">
    <value>Group doesn't exist</value>
  </data>
  <data name="UnknownIdentityProvisioning" xml:space="preserve">
    <value>The identity provisioning doesn't exist</value>
  </data>
  <data name="UnknownIdProvider" xml:space="preserve">
    <value>Identity provider '{0}' doesn't exist</value>
  </data>
  <data name="UnknownResource" xml:space="preserve">
    <value>The resource '{0}' doesn't exist</value>
  </data>
  <data name="UnknownUser" xml:space="preserve">
    <value>The user '{0}' doesn't exist</value>
  </data>
  <data name="UserClaimsUpdated" xml:space="preserve">
    <value>User claims has been updated</value>
  </data>
  <data name="UserConsentRejected" xml:space="preserve">
    <value>User consent has been rejected</value>
  </data>
  <data name="UserCredentialAdded" xml:space="preserve">
    <value>User credential has been added</value>
  </data>
  <data name="UserCredentialRemoved" xml:space="preserve">
    <value>User credential is removed</value>
  </data>
  <data name="UserCredentialUpdated" xml:space="preserve">
    <value>User credential is updated</value>
  </data>
  <data name="UserDetailsUpdated" xml:space="preserve">
    <value>User details have been updated</value>
  </data>
  <data name="UserGroupsAssigned" xml:space="preserve">
    <value>User groups have been assigned</value>
  </data>
  <data name="UserRolesUnassigned" xml:space="preserve">
    <value>User roles have been unassigned</value>
  </data>
  <data name="UserSessionRejected" xml:space="preserve">
    <value>User session has been rejected</value>
  </data>
  <data name="UserAdded" xml:space="preserve">
    <value>A new user has been added</value>
  </data>
  <data name="SelectedUsersRemoved" xml:space="preserve">
    <value>Selected users are removed</value>
  </data>
  <data name="SelectedCredentialTemplatesRemoved" xml:space="preserve">
    <value>Selected credential templates are removed</value>
  </data>
  <data name="CredentialTemplateExists" xml:space="preserve">
    <value>The credential template with type '{0}' already exists</value>
  </data>
  <data name="CredentialTemplateAdded" xml:space="preserve">
    <value>Credential template is added</value>
  </data>
  <data name="SelectedCredentialTemplateDisplaysRemoved" xml:space="preserve">
    <value>Selected displays have been removed</value>
  </data>
  <data name="CredentialTemplateDisplayAdded" xml:space="preserve">
    <value>Display has been added</value>
  </data>
  <data name="SelectedCredentialSubjectsRemoved" xml:space="preserve">
    <value>Selected credentials subjects are removed</value>
  </data>
  <data name="CredentialTypesAreUpdated" xml:space="preserve">
    <value>Credential types are updated</value>
  </data>
  <data name="CredentialSubjectAdded" xml:space="preserve">
    <value>Credential subject has been added</value>
  </data>
  <data name="CredentialOfferAdded" xml:space="preserve">
    <value>Credential offer has been added</value>
  </data>
  <data name="SelectedCredentialOffersRemoved" xml:space="preserve">
    <value>Selected credential offers have been removed</value>
  </data>
  <data name="EthrNetworkExists" xml:space="preserve">
    <value>The ethereum network {0} already exists</value>
  </data>
  <data name="EthrContractDeployed" xml:space="preserve">
    <value>Ethereum contract has been deployed</value>
  </data>
  <data name="EthrNetworkAdded" xml:space="preserve">
    <value>Ethereum network has been added</value>
  </data>
  <data name="SelectedEthrNetworksRemoved" xml:space="preserve">
    <value>Selected ethereum networks have been removed</value>
  </data>
  <data name="DIDKeyCreated" xml:space="preserve">
    <value>DID has been generated</value>
  </data>
  <data name="AcrAdded" xml:space="preserve">
    <value>Authentication Class Reference has been added</value>
  </data>
  <data name="SelectedAcrsRemoved" xml:space="preserve">
    <value>Selected ACRS have been removed</value>
  </data>
  <data name="ClientAdvancedSettingsUpdated" xml:space="preserve">
    <value>Advanced settings have been updated</value>
  </data>
  <data name="AuthMethodUpdated" xml:space="preserve">
    <value>Authentication Method has been updated</value>
  </data>
  <data name="SelectedRegistrationWorkflowRemoved" xml:space="preserve">
    <value>Selected registration workflows have been removed</value>
  </data>
  <data name="RegistrationWorkflowAdded" xml:space="preserve">
    <value>Registration workflow '{0}' has been added</value>
  </data>
  <data name="RegistrationWorkflowUpdated" xml:space="preserve">
    <value>Registration workflow '{0}' has been updated</value>
  </data>
  <data name="CannotAddRealmBecauseOptionIsDisabled" xml:space="preserve">
    <value>Realm cannot be added because the option is disabled</value>
  </data>
  <data name="ScopeResourcesRemoved" xml:space="preserve">
    <value>Scope resources have been removed</value>
  </data>
  <data name="Manage" xml:space="preserve">
    <value>Manage</value>
  </data>
  <data name="IdProvisioningMapperUpdated" xml:space="preserve">
    <value>The identity provisioning mapping rule has been updated</value>
  </data>
  <data name="NoProperties" xml:space="preserve">
    <value>There is no property</value>
  </data>
  <data name="ProcessImportStarted" xml:space="preserve">
    <value>Process import has been started</value>
  </data>
  <data name="Adding" xml:space="preserve">
    <value>Adding..</value>
  </data>
  <data name="AtLeastOneRedirectionUrl" xml:space="preserve">
    <value>At least one redirection URL must be specified</value>
  </data>
  <data name="Identifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="IdentifierIsRequired" xml:space="preserve">
    <value>Identifier is required</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="RedirectionUrls" xml:space="preserve">
    <value>Redirection URLs</value>
  </data>
  <data name="RedirectionUrlsDescription" xml:space="preserve">
    <value>Redirection URLs must be passed as a list of URLs separated by &lt;b&gt;;&lt;/b&gt;. &lt;br /&gt; URLs must be valid and must not contain fragments, for example (http://localhost#fragment)</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Secret" xml:space="preserve">
    <value>Secret</value>
  </data>
  <data name="SecretIsRequired" xml:space="preserve">
    <value>Secret is required</value>
  </data>
  <data name="AuthorizationCode" xml:space="preserve">
    <value>Authorization code</value>
  </data>
  <data name="TokenExchangePreAuthorizedCode" xml:space="preserve">
    <value>Token exchange pre-authorized code</value>
  </data>
  <data name="AcrsDescription" xml:space="preserve">
    <value>ACR stands for Authentication Context Class Reference. It is used to enhance the user's level of assurance before accessing any sensitive information.</value>
  </data>
  <data name="AcrsTitle" xml:space="preserve">
    <value>ACRS</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddAcr" xml:space="preserve">
    <value>Add Authentication Context Reference</value>
  </data>
  <data name="AddCertificateAuthority" xml:space="preserve">
    <value>Add Certificate Authority</value>
  </data>
  <data name="AddClientCertificate" xml:space="preserve">
    <value>Add Client Certificate</value>
  </data>
  <data name="Auditing" xml:space="preserve">
    <value>Auditing</value>
  </data>
  <data name="Authentication" xml:space="preserve">
    <value>Authentication</value>
  </data>
  <data name="AuthenticationMethods" xml:space="preserve">
    <value>Authentication methods</value>
  </data>
  <data name="Authentications" xml:space="preserve">
    <value>Authentications</value>
  </data>
  <data name="CertificateAuthoritiesDescription" xml:space="preserve">
    <value>Manage the Certificate Authorities used by SimpleIdServer during the configuration of the &lt;i&gt;tls_client_auth&lt;/i&gt; authentication method</value>
  </data>
  <data name="CertificateAuthoritiesTitle" xml:space="preserve">
    <value>Certificate Authorities</value>
  </data>
  <data name="CertificateAuthorityDetailsTitle" xml:space="preserve">
    <value>Certificate Authority Details</value>
  </data>
  <data name="ClientCertificate" xml:space="preserve">
    <value>Client Certificate</value>
  </data>
  <data name="ClientCertificates" xml:space="preserve">
    <value>Client certificates</value>
  </data>
  <data name="ClientIdentifier" xml:space="preserve">
    <value>Client identifier</value>
  </data>
  <data name="CreateDateTime" xml:space="preserve">
    <value>Creation Datetime</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>Display name</value>
  </data>
  <data name="DisplayOnlyErrors" xml:space="preserve">
    <value>Display Only Errors</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="EndDatetime" xml:space="preserve">
    <value>End Datetime</value>
  </data>
  <data name="ErrorMessage" xml:space="preserve">
    <value>Error Message</value>
  </data>
  <data name="ExternalIdentityProviders" xml:space="preserve">
    <value>External identity providers</value>
  </data>
  <data name="FindType" xml:space="preserve">
    <value>Find type</value>
  </data>
  <data name="FindValue" xml:space="preserve">
    <value>Find value</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="PrivateKey" xml:space="preserve">
    <value>Private Key</value>
  </data>
  <data name="PublicKey" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="PushNotification" xml:space="preserve">
    <value>Push notification</value>
  </data>
  <data name="Request" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="StartDatetime" xml:space="preserve">
    <value>Start Datetime</value>
  </data>
  <data name="StoreLocation" xml:space="preserve">
    <value>Store Location</value>
  </data>
  <data name="StoreName" xml:space="preserve">
    <value>Store name</value>
  </data>
  <data name="UpdateDateTime" xml:space="preserve">
    <value>Update datetime</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="ValidFrom" xml:space="preserve">
    <value>Valid from</value>
  </data>
  <data name="ValidTo" xml:space="preserve">
    <value>Valid to</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="AccessRequest" xml:space="preserve">
    <value>Access request</value>
  </data>
  <data name="AccessSettings" xml:space="preserve">
    <value>Access settings</value>
  </data>
  <data name="AccessTokenType" xml:space="preserve">
    <value>Access Token Type</value>
  </data>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="AddApiResource" xml:space="preserve">
    <value>Add API resource</value>
  </data>
  <data name="AddClaim" xml:space="preserve">
    <value>Add claim</value>
  </data>
  <data name="AddClient" xml:space="preserve">
    <value>Add client</value>
  </data>
  <data name="AddClientScope" xml:space="preserve">
    <value>Add client scope</value>
  </data>
  <data name="AddCredential" xml:space="preserve">
    <value>Add credential</value>
  </data>
  <data name="AddGroup" xml:space="preserve">
    <value>Add group</value>
  </data>
  <data name="AddIdentityProvider" xml:space="preserve">
    <value>Add Identity Provider</value>
  </data>
  <data name="AddMapper" xml:space="preserve">
    <value>Add Mapper</value>
  </data>
  <data name="AddMappingRule" xml:space="preserve">
    <value>Add mapping rule</value>
  </data>
  <data name="AddMember" xml:space="preserve">
    <value>Add member</value>
  </data>
  <data name="AddRealm" xml:space="preserve">
    <value>Add realm</value>
  </data>
  <data name="AddRegistrationWorkflow" xml:space="preserve">
    <value>Add registration workflow</value>
  </data>
  <data name="AddRole" xml:space="preserve">
    <value>Add client role</value>
  </data>
  <data name="AddScope" xml:space="preserve">
    <value>Add scope</value>
  </data>
  <data name="AddUser" xml:space="preserve">
    <value>Add user</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="Algorithm" xml:space="preserve">
    <value>Algorithm</value>
  </data>
  <data name="ApiResource" xml:space="preserve">
    <value>API Resource</value>
  </data>
  <data name="ApiResources" xml:space="preserve">
    <value>API Resources</value>
  </data>
  <data name="ApiScope" xml:space="preserve">
    <value>API Scope</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>Are-you sure?</value>
  </data>
  <data name="AssignGroups" xml:space="preserve">
    <value>Assign groups</value>
  </data>
  <data name="AttemptAuthentication" xml:space="preserve">
    <value>Authentication attempt today</value>
  </data>
  <data name="Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="Audience" xml:space="preserve">
    <value>Audience</value>
  </data>
  <data name="AuthenticationMethod" xml:space="preserve">
    <value>Authentication method</value>
  </data>
  <data name="AuthenticationMethodRequired" xml:space="preserve">
    <value>Authentication method is required</value>
  </data>
  <data name="AuthenticationTime" xml:space="preserve">
    <value>Authentication time</value>
  </data>
  <data name="AuthorizationDataTypes" xml:space="preserve">
    <value>Authorization data types</value>
  </data>
  <data name="AuthorizationDataTypesDescription" xml:space="preserve">
    <value>Authorization data types must be passed as a list separated by &lt;b&gt;;&lt;/b&gt;</value>
  </data>
  <data name="AuthorizationDataTypesTooltip" xml:space="preserve">
    <value>Authorization data types supported by the client</value>
  </data>
  <data name="AuthorizationDetails" xml:space="preserve">
    <value>Authorization details</value>
  </data>
  <data name="AuthorizationResponseSignatureAlg" xml:space="preserve">
    <value>Authorization response signature algorithm</value>
  </data>
  <data name="AuthorizationResponseSignatureAlgTooltip" xml:space="preserve">
    <value>JWA algorithm used for signing authorization response tokens when the response mode is jwt.</value>
  </data>
  <data name="BackChannelLogoutSessionRequired" xml:space="preserve">
    <value>Backchannel logout session required</value>
  </data>
  <data name="BackChannelLogoutSessionRequiredTooltip" xml:space="preserve">
    <value>Boolean value specifying whether the OP can pass a SID claim in the Logout token to identify the RP session with the OP. &lt;br /&gt; If supported, the sid claim is also included in ID tokens issued by the OP.</value>
  </data>
  <data name="BackChannelLogoutUri" xml:space="preserve">
    <value>Backchannel logout URL</value>
  </data>
  <data name="BackChannelLogoutUriTooltip" xml:space="preserve">
    <value>RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.</value>
  </data>
  <data name="CapabilityConfig" xml:space="preserve">
    <value>Capability config</value>
  </data>
  <data name="CertificateAuthorityType" xml:space="preserve">
    <value>Certificate Authority Type</value>
  </data>
  <data name="CertificateStore" xml:space="preserve">
    <value>Certificate store</value>
  </data>
  <data name="Children" xml:space="preserve">
    <value>Children</value>
  </data>
  <data name="ChooseMappingRule" xml:space="preserve">
    <value>Choose a type of mapping rule</value>
  </data>
  <data name="ChooseRealm" xml:space="preserve">
    <value>Choose realm</value>
  </data>
  <data name="CIBA" xml:space="preserve">
    <value>CIBA</value>
  </data>
  <data name="Claims" xml:space="preserve">
    <value>Claims</value>
  </data>
  <data name="ClaimsDescription" xml:space="preserve">
    <value>List of user claims.</value>
  </data>
  <data name="Client" xml:space="preserve">
    <value>Client</value>
  </data>
  <data name="ClientCredentials" xml:space="preserve">
    <value>Client credentials</value>
  </data>
  <data name="ClientDetailsTitle" xml:space="preserve">
    <value>Client details</value>
  </data>
  <data name="Clients" xml:space="preserve">
    <value>Clients</value>
  </data>
  <data name="ClientScopes" xml:space="preserve">
    <value>Client scopes</value>
  </data>
  <data name="ClientsDescription" xml:space="preserve">
    <value>Set up mobile, web, or IoT clients to use SimpleIdServer for authentication.</value>
  </data>
  <data name="ClientSecret" xml:space="preserve">
    <value>Client secret</value>
  </data>
  <data name="ClientSecretBasicDescription" xml:space="preserve">
    <value>The application utilizes the HTTP Basic Authentication scheme.</value>
  </data>
  <data name="ClientSecretBasicName" xml:space="preserve">
    <value>Client secret basic</value>
  </data>
  <data name="ClientSecretPostDescription" xml:space="preserve">
    <value>The application includes its secret in the HTTP request body as a form parameter.</value>
  </data>
  <data name="ClientSecretPostName" xml:space="preserve">
    <value>Client secret post</value>
  </data>
  <data name="ClientSecretRequired" xml:space="preserve">
    <value>Client secret is required</value>
  </data>
  <data name="ClientsTitle" xml:space="preserve">
    <value>Clients</value>
  </data>
  <data name="Confirmed" xml:space="preserve">
    <value>Confirmed</value>
  </data>
  <data name="ConsentRequired" xml:space="preserve">
    <value>Consent required</value>
  </data>
  <data name="Consents" xml:space="preserve">
    <value>Consents</value>
  </data>
  <data name="CreatedAt" xml:space="preserve">
    <value>Created at</value>
  </data>
  <data name="Credentials" xml:space="preserve">
    <value>Credentials</value>
  </data>
  <data name="Data" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="Delegation" xml:space="preserve">
    <value>Delegation</value>
  </data>
  <data name="DescriptionRequired" xml:space="preserve">
    <value>Description is required</value>
  </data>
  <data name="Device" xml:space="preserve">
    <value>Device</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="DisplayNameRequired" xml:space="preserve">
    <value>Display Name is required</value>
  </data>
  <data name="Dns" xml:space="preserve">
    <value>DNS</value>
  </data>
  <data name="DpopNonceLifetime" xml:space="preserve">
    <value>Lifetime of DPoP Nonce</value>
  </data>
  <data name="DpopNonceLifetimeTooltip" xml:space="preserve">
    <value>Lifetime of a DPoP nonce in seconds.</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EndExport" xml:space="preserve">
    <value>End export</value>
  </data>
  <data name="EndImport" xml:space="preserve">
    <value>End import</value>
  </data>
  <data name="ExecutionHistory" xml:space="preserve">
    <value>Execution history.</value>
  </data>
  <data name="ExpirationTime" xml:space="preserve">
    <value>Expiration time</value>
  </data>
  <data name="Expired" xml:space="preserve">
    <value>Expired</value>
  </data>
  <data name="ExternalIdProviders" xml:space="preserve">
    <value>External Identity Providers</value>
  </data>
  <data name="Extracted" xml:space="preserve">
    <value>Extracted</value>
  </data>
  <data name="ExtractionResult" xml:space="preserve">
    <value>Extraction result</value>
  </data>
  <data name="Firstname" xml:space="preserve">
    <value>First name</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="FrontChannelLogoutSessionRequired" xml:space="preserve">
    <value>Front-channel logout session required</value>
  </data>
  <data name="FrontChannelLogoutSessionRequiredTooltip" xml:space="preserve">
    <value>Boolean value specifying whether the RP requires that iss (issuer) and sid (session id) query parameters be included to identify the RP session with the OP when the front_channel_logout_uri is used.</value>
  </data>
  <data name="FrontChannelLogoutUri" xml:space="preserve">
    <value>Front-channel logout URL</value>
  </data>
  <data name="FrontChannelLogoutUriTooltip" xml:space="preserve">
    <value>RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.</value>
  </data>
  <data name="GeneralSettings" xml:space="preserve">
    <value>General settings</value>
  </data>
  <data name="Generate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="GenerateCADescription" xml:space="preserve">
    <value>Generate a Certificate Authority and store it in the database.</value>
  </data>
  <data name="GenerateCAName" xml:space="preserve">
    <value>Generate one Certificate Authority</value>
  </data>
  <data name="GenerateNewKey" xml:space="preserve">
    <value>Generate new key</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="GroupDetails" xml:space="preserve">
    <value>Group details</value>
  </data>
  <data name="GroupName" xml:space="preserve">
    <value>Group name</value>
  </data>
  <data name="Groups" xml:space="preserve">
    <value>Groups</value>
  </data>
  <data name="Histories" xml:space="preserve">
    <value>Histories</value>
  </data>
  <data name="IdentityProviderDetails" xml:space="preserve">
    <value>Identity Provider details</value>
  </data>
  <data name="IdentityProviderMappers" xml:space="preserve">
    <value>Identity Provider mappers</value>
  </data>
  <data name="IdentityProviders" xml:space="preserve">
    <value>Identity providers</value>
  </data>
  <data name="IdentityProvidersDescription" xml:space="preserve">
    <value>Configure external Identity Providers such as Facebook, Twitter, GitHub, and others, so that your users can log in using them.</value>
  </data>
  <data name="IdentityProviderType" xml:space="preserve">
    <value>Identity Provider Type</value>
  </data>
  <data name="IdentityProvisioning" xml:space="preserve">
    <value>Identity provisioning</value>
  </data>
  <data name="IdentityProvisioningDetails" xml:space="preserve">
    <value>Identity Provisioning details</value>
  </data>
  <data name="IdentityProvisioningLstDescription" xml:space="preserve">
    <value>Extract users and groups from one or more storage sources.</value>
  </data>
  <data name="IdentityResource" xml:space="preserve">
    <value>Identity Resource</value>
  </data>
  <data name="IdentityScope" xml:space="preserve">
    <value>Identity Scope</value>
  </data>
  <data name="IdServerSwagger" xml:space="preserve">
    <value>IdServer swagger</value>
  </data>
  <data name="IdTokenSignatureAlg" xml:space="preserve">
    <value>ID token signature algorithm</value>
  </data>
  <data name="IdTokenSignatureAlgTooltip" xml:space="preserve">
    <value>JWA algorithm used for signing ID tokens</value>
  </data>
  <data name="Impersonation" xml:space="preserve">
    <value>Impersonation</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="Imported" xml:space="preserve">
    <value>Imported</value>
  </data>
  <data name="ImportUsersAndGroupsTooltip" xml:space="preserve">
    <value>Import users and groups</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="Ip" xml:space="preserve">
    <value>Ip</value>
  </data>
  <data name="IsDefault" xml:space="preserve">
    <value>Is default?</value>
  </data>
  <data name="IsDpopNonceRequired" xml:space="preserve">
    <value>Is DPoP Nonce required?</value>
  </data>
  <data name="IsDpopNonceRequiredTooltip" xml:space="preserve">
    <value>May be used by the authorization server to limit the lifetime of DPoP Proof.</value>
  </data>
  <data name="IsDpopRequired" xml:space="preserve">
    <value>Is DPoP required?</value>
  </data>
  <data name="IsDpopRequiredTooltip" xml:space="preserve">
    <value>DPoP is an application-level mechanism for sender-constraining OAuth access and refresh tokens.</value>
  </data>
  <data name="IsExposed" xml:space="preserve">
    <value>Is exposed ?</value>
  </data>
  <data name="IsExposedDescription" xml:space="preserve">
    <value>Scope can be exposed by the configuration endpoint &lt;i&gt;.well-known/openid-configuration&lt;/i&gt;</value>
  </data>
  <data name="Jwt" xml:space="preserve">
    <value>Json Web Token (JWT)</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="KeyRequired" xml:space="preserve">
    <value>Key is required</value>
  </data>
  <data name="Keys" xml:space="preserve">
    <value>Keys</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="Lastname" xml:space="preserve">
    <value>Last name</value>
  </data>
  <data name="Launch" xml:space="preserve">
    <value>Launch</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginSettings" xml:space="preserve">
    <value>Login settings</value>
  </data>
  <data name="ManualActionRequiredRevokeSession" xml:space="preserve">
    <value>Manual action is required to revoke a session</value>
  </data>
  <data name="ManualActionRequiredRevokeSessionTooltip" xml:space="preserve">
    <value>After 3 seconds, the session is revoked, and the user agent is automatically redirected to the client</value>
  </data>
  <data name="MapperDetails" xml:space="preserve">
    <value>Mapper details</value>
  </data>
  <data name="Mappers" xml:space="preserve">
    <value>Mappers</value>
  </data>
  <data name="MapperType" xml:space="preserve">
    <value>Mapper Type</value>
  </data>
  <data name="MappingRules" xml:space="preserve">
    <value>Mapping rules</value>
  </data>
  <data name="MapToOneUserClaim" xml:space="preserve">
    <value>Map to one user claim</value>
  </data>
  <data name="MetadataUrl" xml:space="preserve">
    <value>Metadata URL</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NotificationMode" xml:space="preserve">
    <value>Notification mode</value>
  </data>
  <data name="NotificationModeTooltip" xml:space="preserve">
    <value>Notification mode used during Backchannel Authentication</value>
  </data>
  <data name="NumberOfDays" xml:space="preserve">
    <value>Number of days</value>
  </data>
  <data name="NumberOfDaysDescription" xml:space="preserve">
    <value>Number of days the certificate will be valid</value>
  </data>
  <data name="NumberOfDaysRequired" xml:space="preserve">
    <value>Number of Days is required</value>
  </data>
  <data name="OAuth" xml:space="preserve">
    <value>OAUTH</value>
  </data>
  <data name="OpenId" xml:space="preserve">
    <value>OPENID</value>
  </data>
  <data name="OpenIdConnect" xml:space="preserve">
    <value>OpenID Connect</value>
  </data>
  <data name="Otp" xml:space="preserve">
    <value>One Time Password (OTP)</value>
  </data>
  <data name="OtpCredDescription" xml:space="preserve">
    <value>A random and unique password will be generated</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordCredDescription" xml:space="preserve">
    <value>Generate a static password</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="Pending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="PKCEDescription" xml:space="preserve">
    <value>It introduces a secret generated by the calling application that can be validated by the authorization server.</value>
  </data>
  <data name="PKCEName" xml:space="preserve">
    <value>PKCE</value>
  </data>
  <data name="PrivatePem" xml:space="preserve">
    <value>Private pem</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="Protocol" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="ProtocolIsRequired" xml:space="preserve">
    <value>Protocol is required</value>
  </data>
  <data name="PublicPem" xml:space="preserve">
    <value>Public pem</value>
  </data>
  <data name="RedirectUrlCaseSensitive" xml:space="preserve">
    <value>Redirect URL is case sensitive</value>
  </data>
  <data name="RedirectUrlCaseSensitiveTooltip" xml:space="preserve">
    <value>Redirect URL is case sensitive</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="RefreshToken" xml:space="preserve">
    <value>Refresh token</value>
  </data>
  <data name="RegistrationMethods" xml:space="preserve">
    <value>Registration methods</value>
  </data>
  <data name="RegistrationWorkflows" xml:space="preserve">
    <value>Registration Workflows</value>
  </data>
  <data name="Reject" xml:space="preserve">
    <value>Reject</value>
  </data>
  <data name="Rejected" xml:space="preserve">
    <value>Rejected</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveSubjectClaimMapper" xml:space="preserve">
    <value>Remove subject claim mapper</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="ResolveRoles" xml:space="preserve">
    <value>Resolve roles</value>
  </data>
  <data name="Resource" xml:space="preserve">
    <value>Resource</value>
  </data>
  <data name="ResourceType" xml:space="preserve">
    <value>Resource type</value>
  </data>
  <data name="ResponseTypes" xml:space="preserve">
    <value>Response types</value>
  </data>
  <data name="ResponseTypesTooltip" xml:space="preserve">
    <value>Informs the Authorization Server of the desired authorization processing flow, including what parameters are returned from the endpoints used.</value>
  </data>
  <data name="Revoke" xml:space="preserve">
    <value>Revoke</value>
  </data>
  <data name="RevokeSessions" xml:space="preserve">
    <value>Revoke sessions</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="Roles" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="RolesDescription" xml:space="preserve">
    <value>Create and manage Groups for your Applications. Groups contain collections of Permissions and can be assigned to Users.</value>
  </data>
  <data name="Saml" xml:space="preserve">
    <value>SAML</value>
  </data>
  <data name="SamlAttributeName" xml:space="preserve">
    <value>SAML Attribute Name</value>
  </data>
  <data name="SamlAttributeNameDescription" xml:space="preserve">
    <value>SAML Attribute Name</value>
  </data>
  <data name="Saving" xml:space="preserve">
    <value>Saving...</value>
  </data>
  <data name="ScimEdp" xml:space="preserve">
    <value>SCIM endpoint</value>
  </data>
  <data name="ScopeDetails" xml:space="preserve">
    <value>Scope details</value>
  </data>
  <data name="ScopeResourcesDescription" xml:space="preserve">
    <value>Select one or more active &lt;b&gt;API resources&lt;/b&gt;  for the scope. The &lt;b&gt;aud&lt;/b&gt; claim is populated with the relevant &lt;b&gt;API resources&lt;/b&gt;. This claim is utilized by the API during the authorization process</value>
  </data>
  <data name="Scopes" xml:space="preserve">
    <value>Scopes</value>
  </data>
  <data name="ScopesDescription" xml:space="preserve">
    <value>Specify the precise actions or resources that a client application can access on behalf of an end-user.</value>
  </data>
  <data name="SelectAmrsHelper" xml:space="preserve">
    <value>Select one or more authentication methods and update the order. The order is important as it determines the sequence of actions for authenticating the end-user.</value>
  </data>
  <data name="SelectRealm" xml:space="preserve">
    <value>Select realm</value>
  </data>
  <data name="SelectResponseTypes" xml:space="preserve">
    <value>Select response types</value>
  </data>
  <data name="SelfSignedX509CertificateDescription" xml:space="preserve">
    <value>The application utilizes a self-signed certificate. The public key of the certificate (RSA or EC) must be provided to the Identity Server either as a value in JWKS (JSON Web Key Set) format or as a URL using the jwks_uri.</value>
  </data>
  <data name="SelfSignedX509CertificateName" xml:space="preserve">
    <value>Self Signed X509 Certificate</value>
  </data>
  <data name="Sessions" xml:space="preserve">
    <value>Sessions</value>
  </data>
  <data name="SetGroupName" xml:space="preserve">
    <value>Set the name of the group</value>
  </data>
  <data name="ShowData" xml:space="preserve">
    <value>Show data</value>
  </data>
  <data name="SignedJwtClientSecretDescription" xml:space="preserve">
    <value>The application constructs a JWT assertion that includes a message authentication code (MAC) in its signature component, and includes it in the request.</value>
  </data>
  <data name="SignedJwtClientSecretName" xml:space="preserve">
    <value>Signed JWT with Client Secret</value>
  </data>
  <data name="SignedJwtDescription" xml:space="preserve">
    <value>The application creates a digitally signed JWT assertion and includes it in the request.</value>
  </data>
  <data name="SignedJwtName" xml:space="preserve">
    <value>Signed jwt</value>
  </data>
  <data name="StartExport" xml:space="preserve">
    <value>Start export</value>
  </data>
  <data name="StartImport" xml:space="preserve">
    <value>Start import</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="SubjectName" xml:space="preserve">
    <value>Subject Name</value>
  </data>
  <data name="SubjectNameDescription" xml:space="preserve">
    <value>Contains identifying information about the entity to which the certificate is issued. &lt;br /&gt; It must starts with &lt;b&gt;CN=&lt;/b&gt;</value>
  </data>
  <data name="SubjectNameRequired" xml:space="preserve">
    <value>Subject Name is required</value>
  </data>
  <data name="SubjetDistinguishedName" xml:space="preserve">
    <value>Subject Distinguished Name</value>
  </data>
  <data name="SuccessAuthentication" xml:space="preserve">
    <value>Successful authentication today</value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="TokenClaimName" xml:space="preserve">
    <value>Token claim name</value>
  </data>
  <data name="TokenClaimNameDescription" xml:space="preserve">
    <value>Name of the claim to insert into the token</value>
  </data>
  <data name="TokenExchange" xml:space="preserve">
    <value>Token exchange</value>
  </data>
  <data name="TokenExchangeType" xml:space="preserve">
    <value>Type of token exchange</value>
  </data>
  <data name="TokenExpirationTime" xml:space="preserve">
    <value>Token expiration time</value>
  </data>
  <data name="TokenExpirationTimeTooltip" xml:space="preserve">
    <value>Set the token duration in seconds; by default, the value is 30 minutes.</value>
  </data>
  <data name="TokenSignatureAlg" xml:space="preserve">
    <value>Token signature algorithm</value>
  </data>
  <data name="TokenSignatureAlgTooltip" xml:space="preserve">
    <value>JWA algorithm used for signing access tokens</value>
  </data>
  <data name="TryExtractUsers" xml:space="preserve">
    <value>Try to extract the users</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="UMA" xml:space="preserve">
    <value>UMA</value>
  </data>
  <data name="Unassign" xml:space="preserve">
    <value>Unassign</value>
  </data>
  <data name="Unlink" xml:space="preserve">
    <value>Unlink</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UpdateCredential" xml:space="preserve">
    <value>Update credential</value>
  </data>
  <data name="UpdatedAt" xml:space="preserve">
    <value>Updated at</value>
  </data>
  <data name="Updating" xml:space="preserve">
    <value>Updating...</value>
  </data>
  <data name="Url" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="UrlRequired" xml:space="preserve">
    <value>URL is required</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage</value>
  </data>
  <data name="UseArtifact" xml:space="preserve">
    <value>Use artifact</value>
  </data>
  <data name="UseCertificateStoreDescription" xml:space="preserve">
    <value>Utilize the Certificate Authority from your local Certificate Store. The Certificate must contain a &lt;b&gt;Private Key&lt;/b&gt;, which will be used to generate the Client Certificate.</value>
  </data>
  <data name="UseCertificateStoreName" xml:space="preserve">
    <value>Use Certificate Store</value>
  </data>
  <data name="UseJwksUrl" xml:space="preserve">
    <value>Use JWKS URL</value>
  </data>
  <data name="UseJwksUrlHelper" xml:space="preserve">
    <value>If the 'Use JWKS URL' switch is enabled, you need to provide a valid JWKS URL. After saving, the administrator can download keys from the JWKS URL.</value>
  </data>
  <data name="UserAttribute" xml:space="preserve">
    <value>User attribute</value>
  </data>
  <data name="MapClaimToUserAttribute" xml:space="preserve">
    <value>Map one claim to a user attribute</value>
  </data>
  <data name="UserClaims" xml:space="preserve">
    <value>User claims</value>
  </data>
  <data name="UserConsentsDescription" xml:space="preserve">
    <value>List of consents accepted by the user for specific clients.</value>
  </data>
  <data name="UserCredentialsDescription" xml:space="preserve">
    <value>List of user credentials. Only one credential per type can be enabled.</value>
  </data>
  <data name="UserDetails" xml:space="preserve">
    <value>User details</value>
  </data>
  <data name="UserGroupsDescription" xml:space="preserve">
    <value>List of groups assigned to the user.</value>
  </data>
  <data name="UserIdentifier" xml:space="preserve">
    <value>User identifier</value>
  </data>
  <data name="UserIdentifierDescription" xml:space="preserve">
    <value>Map one claim to a user identifier</value>
  </data>
  <data name="UserProfilesDescription" xml:space="preserve">
    <value>List of external identification providers (such as Facebook and Google) linked to the user's profile.</value>
  </data>
  <data name="UserProperty" xml:space="preserve">
    <value>User property</value>
  </data>
  <data name="UserPropertyDescription" xml:space="preserve">
    <value>Map one claim to a user property</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="UsersDescription" xml:space="preserve">
    <value>An easy way to manage user identities, handle credentials, and assign or remove groups.</value>
  </data>
  <data name="UserSessionsDescription" xml:space="preserve">
    <value>List of active/inactive user sessions.</value>
  </data>
  <data name="UserSubject" xml:space="preserve">
    <value>User subject</value>
  </data>
  <data name="UserSubjectDescription" xml:space="preserve">
    <value>Map one claim to a user subject</value>
  </data>
  <data name="ValidationPostLogoutRedirectUris" xml:space="preserve">
    <value>Validation post logout redirect URIs</value>
  </data>
  <data name="ValidationPostLogoutRedirectUrisTooltip" xml:space="preserve">
    <value>Array of URLs supplied by the RP to which it MAY request that the End-User's User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed. &lt;br /&gt; Post Logout URLs must be passed as a list of URL separated by ;</value>
  </data>
  <data name="ValidationRedirectionUris" xml:space="preserve">
    <value>Validation redirection URIs</value>
  </data>
  <data name="ValidationRedirectionUrisTooltip" xml:space="preserve">
    <value>Valid URI pattern a browser can redirect to after a successful login. &lt;br /&gt; Redirection URLs must be passed as a list of URL separated by ;</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ValueRequired" xml:space="preserve">
    <value>Value is required</value>
  </data>
  <data name="WebAuthn" xml:space="preserve">
    <value>WebAuthn</value>
  </data>
  <data name="Workflow" xml:space="preserve">
    <value>Workflow</value>
  </data>
  <data name="WsFederation" xml:space="preserve">
    <value>WS-Federation</value>
  </data>
  <data name="X509CertificateDescription" xml:space="preserve">
    <value>The application employs a certificate issued by a trusted Certificate Authority (CA).</value>
  </data>
  <data name="X509CertificateName" xml:space="preserve">
    <value>X509 Certificate</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="AccessClaimsAuthenticatedUser" xml:space="preserve">
    <value>Access to the claims of the authenticated user</value>
  </data>
  <data name="AccessOneOrMoreApiResources" xml:space="preserve">
    <value>Access to one or more API resources</value>
  </data>
  <data name="APIValue" xml:space="preserve">
    <value>API Value</value>
  </data>
  <data name="ClientsAuthorizedToAccessApiResource" xml:space="preserve">
    <value>Clients authorized to access an API resource are granted access to one or more scopes. For example, a &lt;i&gt;Client API&lt;/i&gt; can have scopes such as &lt;i&gt;read,delete,update&lt;/i&gt;. For more information, please refer to the documentation at &lt;a href='https://www.rfc-editor.org/rfc/rfc8707.pdf' target='_blank'&gt;RFC8707&lt;/a&gt;</value>
  </data>
  <data name="ClientsAuthorizedToAccessSpecificClaims" xml:space="preserve">
    <value>Clients authorized to access the Identity Value have access to specific claims. Standard Identity Resources are defined by the OPENID standard (such as profile, email, etc.). For more information, please refer to the documentation at &lt;a href='https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims' target='_blank'&gt;OPENID Connect Core 1.0 - Scope Claims&lt;/a&gt;</value>
  </data>
  <data name="IdentityValue" xml:space="preserve">
    <value>Identity Value</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="ActiveRealm" xml:space="preserve">
    <value>Active realm {0}</value>
  </data>
  <data name="AlgorithmRequired" xml:space="preserve">
    <value>Algorithm is required</value>
  </data>
  <data name="ApplicationType" xml:space="preserve">
    <value>Application type</value>
  </data>
  <data name="AssignedGroups" xml:space="preserve">
    <value>Assigned groups</value>
  </data>
  <data name="AuthenticationContext" xml:space="preserve">
    <value>Authentication context</value>
  </data>
  <data name="AutomaticIdentityProvisioning" xml:space="preserve">
    <value>Automatic Identity Provisioning</value>
  </data>
  <data name="ChooseTemplate" xml:space="preserve">
    <value>Choose template</value>
  </data>
  <data name="ClaimJsonType" xml:space="preserve">
    <value>Claim JSON Type</value>
  </data>
  <data name="ClaimJsonTypeRequired" xml:space="preserve">
    <value>Claim JSON Type is required</value>
  </data>
  <data name="ClaimToInsertInTheToken" xml:space="preserve">
    <value>Name of the claim to insert into the token</value>
  </data>
  <data name="Configure" xml:space="preserve">
    <value>Configure</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Counter" xml:space="preserve">
    <value>Counter</value>
  </data>
  <data name="CredentialIssuer" xml:space="preserve">
    <value>Credential issuer</value>
  </data>
  <data name="CredentialIssuerDescription" xml:space="preserve">
    <value>A REST API for credential issuance capable of generating trusted and verifiable credentials, such as University Degrees.</value>
  </data>
  <data name="CredentialIssuerShortDescription" xml:space="preserve">
    <value>Credential issuer</value>
  </data>
  <data name="DeviceDescription" xml:space="preserve">
    <value>An IoT application or otherwise browserless or input constrained device.</value>
  </data>
  <data name="DeviceShortDescription" xml:space="preserve">
    <value>Device Authorization grant</value>
  </data>
  <data name="EmailIsInvalid" xml:space="preserve">
    <value>Provide a valid email address</value>
  </data>
  <data name="Encryption" xml:space="preserve">
    <value>Encryption</value>
  </data>
  <data name="EncryptionKey" xml:space="preserve">
    <value>Encryption Key</value>
  </data>
  <data name="EncryptionRequired" xml:space="preserve">
    <value>Encryption is required</value>
  </data>
  <data name="ExternalDeviceAuth" xml:space="preserve">
    <value>External Device Authentication</value>
  </data>
  <data name="ExternalDeviceAuthShortDescription" xml:space="preserve">
    <value>Client Initiated Backchannel Authentication (CIBA) flow</value>
  </data>
  <data name="ExternalDeviceDescription" xml:space="preserve">
    <value>Authentication is performed via an Authentication Device by the user who also consents (if required) to the request.</value>
  </data>
  <data name="GenerateEncryptionKeyHelper" xml:space="preserve">
    <value>Generate JSON Web Encryption (JWE) &lt;a href='https://www.rfc-editor.org/rfc/rfc7516' target='_blank'&gt;https://www.rfc-editor.org/rfc/rfc7516&lt;/a&gt;</value>
  </data>
  <data name="GenerateSignatureKeyHelper" xml:space="preserve">
    <value>Generate a signature key. Check the JWT request object at &lt;a href='https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests' target='_blank'&gt;OpenID Connect Core 1.0 - JWT Requests&lt;/a&gt;. This key is used in the &lt;i&gt;private_key_jwt&lt;/i&gt; and &lt;i&gt;client_secret_jwt&lt;/i&gt; authentication flows, as described in &lt;a href='https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication' target='_blank'&gt;OpenID Connect Core 1.0 - Client Authentication.&lt;/a&gt;</value>
  </data>
  <data name="GrantMgt" xml:space="preserve">
    <value>Grant Management</value>
  </data>
  <data name="GrantMgtDescription" xml:space="preserve">
    <value>The web application is executed on a server (ASP.NET CORE, SPRING, etc.) and implements all the security requirements proposed by FAPI 2.0. Additionally, it supports grant management</value>
  </data>
  <data name="GrantMgtShortDescription" xml:space="preserve">
    <value>Web application with FAPI 2.0 security requirements and grant management support.</value>
  </data>
  <data name="GroupIdentifier" xml:space="preserve">
    <value>Group Identifier</value>
  </data>
  <data name="HighlySecuredWebApp" xml:space="preserve">
    <value>Highly secure Web Application</value>
  </data>
  <data name="HighlySecuredWebAppDescription" xml:space="preserve">
    <value>The web application is executed on a server (ASP.NET CORE, SPRING, etc.) and implements all the security requirements proposed by FAPI 2.0.</value>
  </data>
  <data name="HighlySecuredWebAppShortDescription" xml:space="preserve">
    <value>Web Application with FAPI 2.0 security requirements</value>
  </data>
  <data name="HotpDescription" xml:space="preserve">
    <value>HMAC-based One time Password algorithm (HOTP) is an event-based OTP where the moving factor in each code is based on a counter.</value>
  </data>
  <data name="IncludeInAccessToken" xml:space="preserve">
    <value>Include in access token</value>
  </data>
  <data name="Jwe" xml:space="preserve">
    <value>Jwe</value>
  </data>
  <data name="Jwk" xml:space="preserve">
    <value>Json Web Key (JWK)</value>
  </data>
  <data name="JwkClientUsageDescription" xml:space="preserve">
    <value>Check the JWT request object at &lt;a href='https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests' target='_blank'&gt;OpenID Connect Core 1.0 - JWT Requests&lt;/a&gt;. This key is used in the &lt;i&gt;private_key_jwt&lt;/i&gt; and &lt;i&gt;client_secret_jwt&lt;/i&gt; authentication flows, as described in &lt;a href='https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication' target='_blank'&gt;OpenID Connect Core 1.0 - Client Authentication.&lt;/a&gt;</value>
  </data>
  <data name="KeyGenerated" xml:space="preserve">
    <value>Key has been generated !</value>
  </data>
  <data name="KeyType" xml:space="preserve">
    <value>Key type</value>
  </data>
  <data name="KeyTypeRequired" xml:space="preserve">
    <value>Key type is required</value>
  </data>
  <data name="LdapOrJsonPathRequired" xml:space="preserve">
    <value>According to the type of identity provisioning, you must specify an LDAP property or a JSON path if you are using SCIM.</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Machine" xml:space="preserve">
    <value>Machine</value>
  </data>
  <data name="MachineDescription" xml:space="preserve">
    <value>Machine-to-machine (M2M) applications, such as CLIs, daemons, or services running on your back-end, the system authenticates and authorizes the app rather than a user.</value>
  </data>
  <data name="MachineShortDescription" xml:space="preserve">
    <value>Client credentials</value>
  </data>
  <data name="ManualIdentityProvisioning" xml:space="preserve">
    <value>Manual Identity Provisioning</value>
  </data>
  <data name="MapUserAttributeToClaim" xml:space="preserve">
    <value>Map one user attribute to one claim</value>
  </data>
  <data name="MapUserPropertyToClaim" xml:space="preserve">
    <value>Map one user property to one claim</value>
  </data>
  <data name="MetadataUrlRequired" xml:space="preserve">
    <value>Metadata URL is required</value>
  </data>
  <data name="Mobile" xml:space="preserve">
    <value>Mobile</value>
  </data>
  <data name="MobileDescription" xml:space="preserve">
    <value>A desktop or mobile application running on a user's device</value>
  </data>
  <data name="MobileShortDescription" xml:space="preserve">
    <value>Authorization code + PKCE</value>
  </data>
  <data name="Mtls" xml:space="preserve">
    <value>Mutual-TLS Client Authentication</value>
  </data>
  <data name="MtlsAuthenticationIsEnabled" xml:space="preserve">
    <value>By default, the client is configured to use MTLS authentication. &lt;br/&gt;
The Subject Name of the client certificate must be specified.</value>
  </data>
  <data name="MtlsProofOfPossessionSubjectNameHelper" xml:space="preserve">
    <value>MTLS authentication is configured by default. &lt;br /&gt;
The Subject Name is used to verify the validity of the Client Certificate.</value>
  </data>
  <data name="Multivalued" xml:space="preserve">
    <value>Multivalued</value>
  </data>
  <data name="PasswordConfirmation" xml:space="preserve">
    <value>Password confirmation</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="ProofOfPossession" xml:space="preserve">
    <value>Proof of possession</value>
  </data>
  <data name="PropertyName" xml:space="preserve">
    <value>Name of the property</value>
  </data>
  <data name="QrCode" xml:space="preserve">
    <value>QR Code</value>
  </data>
  <data name="Realm" xml:space="preserve">
    <value>Realm</value>
  </data>
  <data name="SamePassword" xml:space="preserve">
    <value>Passwords should be the same</value>
  </data>
  <data name="SamlAttributeNameRequired" xml:space="preserve">
    <value>SAML Attribute Name is required</value>
  </data>
  <data name="SamlSp" xml:space="preserve">
    <value>SAML SP</value>
  </data>
  <data name="SamlSpDescription" xml:space="preserve">
    <value>A Service Provider (SP) is the entity providing the service, typically in the form of an application</value>
  </data>
  <data name="SamlSpShortDescription" xml:space="preserve">
    <value>SAML Service Provider</value>
  </data>
  <data name="SecretRequired" xml:space="preserve">
    <value>Secret is required</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="SelectDpopProofOfPossessionHelper" xml:space="preserve">
    <value>The client will be configured to use &lt;b&gt;private_key_jwt&lt;/b&gt; authentication method. &lt;br /&gt;
A Signature Key with algorithm &lt;b&gt;ES256&lt;/b&gt; will be added. &lt;br /&gt;
The &lt;b&gt;authorization_signed_response_alg&lt;/b&gt; will be set to &lt;b&gt;ES256&lt;/b&gt;. This value is used by Identity Server during the generation of the authorization response (JARM).</value>
  </data>
  <data name="SelectMtlsProofOfPossessionHelper" xml:space="preserve">
    <value>The client will be configured to use &lt;b&gt;tls_client_auth&lt;/b&gt; authentication method. &lt;br /&gt;
A Signature Key with algorithm &lt;b&gt;ES256&lt;/b&gt; will be added. &lt;br /&gt;
The &lt;b&gt;authorization_signed_response_alg&lt;/b&gt; will be set to &lt;b&gt;ES256&lt;/b&gt;. This value is used by Identity Server during the generation of the authorization response (JARM).</value>
  </data>
  <data name="SelectOneOrMoreAuthMethods" xml:space="preserve">
    <value>Select Authentication Methods</value>
  </data>
  <data name="SelectOneOrMoreAuthMethodsHelper" xml:space="preserve">
    <value>Select one or more registration methods and update the order. The order is important as it determines the sequence of actions for registering the end-user.</value>
  </data>
  <data name="SelectProofOfPossessionHelper" xml:space="preserve">
    <value>Please select a &lt;b&gt;Proof of Possession mechanism&lt;/b&gt;. Access tokens are securely linked to a specific cryptographic key, ensuring that only the sender possesses this key.</value>
  </data>
  <data name="SidAdminUi" xml:space="preserve">
    <value>SimpleIdServer Administration UI</value>
  </data>
  <data name="SignatureKey" xml:space="preserve">
    <value>Signature Key</value>
  </data>
  <data name="SignatureKeyParameters" xml:space="preserve">
    <value>request object, private_key_jwt and client_secret_jwt</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign out</value>
  </data>
  <data name="SourceClaimName" xml:space="preserve">
    <value>Source Claim Name</value>
  </data>
  <data name="SourceClaimNameRequired" xml:space="preserve">
    <value>Source Claim name is required</value>
  </data>
  <data name="SourceContainsMoreThanOneValue" xml:space="preserve">
    <value>Does the source contain more than one value ?</value>
  </data>
  <data name="Standard" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="TokenClaimNameRequired" xml:space="preserve">
    <value>Token claim name is required</value>
  </data>
  <data name="TotpDescription" xml:space="preserve">
    <value>Time-based One-Time Password (TOTP) is a time-based OTP. The seed for TOTP is static, just like in HOTP, but the moving factor in TOTP is time-based rather than counter-based.</value>
  </data>
  <data name="UserAttributeRequired" xml:space="preserve">
    <value>User attribute is required</value>
  </data>
  <data name="UserBasedApp" xml:space="preserve">
    <value>User Agent Based application</value>
  </data>
  <data name="UserBasedAppDescription" xml:space="preserve">
    <value>A client-side application running in a browser (Angular, EmberJS, VueJS etc...). &lt;br/&gt; Client secret and/or refresh tokens cannot be stored by these applications because there is a security risk.</value>
  </data>
  <data name="UserBasedAppShortDescription" xml:space="preserve">
    <value>Authorization code + PKCE</value>
  </data>
  <data name="UserMgt" xml:space="preserve">
    <value>User management</value>
  </data>
  <data name="UserPropertyRequired" xml:space="preserve">
    <value>User property is required</value>
  </data>
  <data name="WebApp" xml:space="preserve">
    <value>Web application</value>
  </data>
  <data name="WebAppDescription" xml:space="preserve">
    <value>Web application executed on server (ASP.NET CORE, SPRING etc...)</value>
  </data>
  <data name="WebAppShortDescription" xml:space="preserve">
    <value>Authorization code</value>
  </data>
  <data name="WsRelyingParty" xml:space="preserve">
    <value>WS-Fed Relying Party</value>
  </data>
  <data name="WsRelyingPartyDescription" xml:space="preserve">
    <value>A WS-Federation relying party commonly used by older Microsoft applications</value>
  </data>
  <data name="WsRelyingPartyShortDescription" xml:space="preserve">
    <value>WS-Federation application</value>
  </data>
  <data name="AssignResources" xml:space="preserve">
    <value>Assign</value>
  </data>
  <data name="UnassignResources" xml:space="preserve">
    <value>Unassign</value>
  </data>
  <data name="AssignedResources" xml:space="preserve">
    <value>Assigned resources</value>
  </data>
  <data name="AvailableResources" xml:space="preserve">
    <value>Available resources</value>
  </data>
  <data name="AudienceIsRequired" xml:space="preserve">
    <value>Audience is equired</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Value is required</value>
  </data>
  <data name="ValueMustBePositive" xml:space="preserve">
    <value>The value must be greater than 1</value>
  </data>
  <data name="Wallet" xml:space="preserve">
    <value>Wallet</value>
  </data>
  <data name="WalletDescription" xml:space="preserve">
    <value>Utilize the mobile application as an electronic wallet</value>
  </data>
  <data name="WalletShortDescription" xml:space="preserve">
    <value>Mobile application</value>
  </data>
  <data name="AssignWorkflow" xml:space="preserve">
    <value>Assign</value>
  </data>
  <data name="RegistrationWorkflow" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="DefaultClientAcr" xml:space="preserve">
    <value>Default acr methods</value>
  </data>
  <data name="DefaultClientAcrTooltip" xml:space="preserve">
    <value>Default authentication method used by the client to authenticate the user</value>
  </data>
  <data name="ClientDefaultAcrValuesHelper" xml:space="preserve">
    <value>ACR must be sorted by priority</value>
  </data>
  <data name="Registration" xml:space="preserve">
    <value>Registration</value>
  </data>
  <data name="AuthMethodCapabilities" xml:space="preserve">
    <value>Capabilities</value>
  </data>
  <data name="FilterAuthMethodByCapabilities" xml:space="preserve">
    <value>Filter the authentication methods by their capabilities</value>
  </data>
  <data name="Legend" xml:space="preserve">
    <value>Legend</value>
  </data>
  <data name="SupportPushNotification" xml:space="preserve">
    <value>Able to receive notifications from the identity server</value>
  </data>
  <data name="SupportUserAuthentication" xml:space="preserve">
    <value>Support user authentication</value>
  </data>
  <data name="SupportUserRegistration" xml:space="preserve">
    <value>Support user registration</value>
  </data>
  <data name="Errors" xml:space="preserve">
    <value>Errors</value>
  </data>
  <data name="RelaunchErrors" xml:space="preserve">
    <value>{0} errors</value>
  </data>
  <data name="Exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="LockAccount" xml:space="preserve">
    <value>Lock account</value>
  </data>
  <data name="UserLockingOptionsUpdated" xml:space="preserve">
    <value>Options have been updated</value>
  </data>
  <data name="Blocked" xml:space="preserve">
    <value>Blocked</value>
  </data>
  <data name="UnblockDateTime" xml:space="preserve">
    <value>Unblock datetime</value>
  </data>
  <data name="NbLoginAttempt" xml:space="preserve">
    <value>Number of login attempts</value>
  </data>
  <data name="ClientRegistrationTypes" xml:space="preserve">
    <value>Client registration types</value>
  </data>
  <data name="ClientExpirationTime" xml:space="preserve">
    <value>Expiration time</value>
  </data>
  <data name="AddTrustAnchor" xml:space="preserve">
    <value>Add trust anchor</value>
  </data>
  <data name="TrustAnchorsDescription" xml:space="preserve">
    <value>TODO</value>
  </data>
  <data name="TrustAnchorsTitle" xml:space="preserve">
    <value>Trust anchors</value>
  </data>
  <data name="AddFederationEntity" xml:space="preserve">
    <value>Add federation entity</value>
  </data>
  <data name="FederationEntitiesDescription" xml:space="preserve">
    <value>Manage the trust anchors used by the identity server.</value>
  </data>
  <data name="FederationEntitiesTitle" xml:space="preserve">
    <value>Federation entities</value>
  </data>
  <data name="TrustAnchor" xml:space="preserve">
    <value>Trust anchor</value>
  </data>
  <data name="TrustEntity" xml:space="preserve">
    <value>Trust entity</value>
  </data>
  <data name="TrustAnchorShortDescription" xml:space="preserve">
    <value>Entity that represents a trusted third party</value>
  </data>
  <data name="TrustAnchorDescription" xml:space="preserve">
    <value>A Trust Anchor is an Entity whose main purpose is to issue statements about Entities</value>
  </data>
  <data name="UrlIsRequired" xml:space="preserve">
    <value>Url is required</value>
  </data>
  <data name="TrustAnchorAdded" xml:space="preserve">
    <value>Trust anchor has been added</value>
  </data>
  <data name="FederationEntityType" xml:space="preserve">
    <value>Entity type</value>
  </data>
  <data name="SelectedFederationEntitiesRemoved" xml:space="preserve">
    <value>The selected federation entities have been removed</value>
  </data>
  <data name="Resources" xml:space="preserve">
    <value>Resources</value>
  </data>
  <data name="Realms" xml:space="preserve">
    <value>Realms</value>
  </data>
  <data name="AssignedRealms" xml:space="preserve">
    <value>Assigned realms</value>
  </data>
  <data name="AssignRealms" xml:space="preserve">
    <value>Assign realms</value>
  </data>
  <data name="AvailableRealms" xml:space="preserve">
    <value>Available realms</value>
  </data>
  <data name="UnassignRealms" xml:space="preserve">
    <value>Unassign realms</value>
  </data>
  <data name="ClientRealmsDescription" xml:space="preserve">
    <value>Select one or more realms</value>
  </data>
  <data name="ClientsRealmsUpdated" xml:space="preserve">
    <value>The client realms have been updated</value>
  </data>
  <data name="NotAuthorized" xml:space="preserve">
    <value>You are not authorized</value>
  </data>
  <data name="SelectedRealmRolesRemoved" xml:space="preserve">
    <value>the selected realm roles are removed</value>
  </data>
  <data name="Permissions" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="Component" xml:space="preserve">
    <value>Component</value>
  </data>
  <data name="AddPermission" xml:space="preserve">
    <value>Add permission</value>
  </data>
  <data name="RealmRoleScopesUpdated" xml:space="preserve">
    <value>Roles have been updated</value>
  </data>
  <data name="RealmPermissions" xml:space="preserve">
    <value>Realm permissions</value>
  </data>
  <data name="RealmPermissionsDescription" xml:space="preserve">
    <value>Select one or more permissions assigned to the realm. You must reconnect to the administration website for the changes to take effect.</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome {0}</value>
  </data>
</root>