@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.GroupStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<GroupMembersState> groupsMembersState
@inject IDispatcher dispatcher
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inject IUrlHelper urlHelper

<SidAuthorizeView Roles=@("/groups/manage")>
    <Authorized>
        <RadzenButton class="mb-1" Click="@(args => AddMember())" Icon="add" Text="@Global.AddMember" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
    </Authorized>
</SidAuthorizeView>

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                PageSize="30"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                IsLoading="@groupsMembersState.Value.IsLoading"
                Count="@groupsMembersState.Value.Count"
                Data="@groupsMembersState.Value.Members"
                RowRender="@RowRender"
                TItem="SelectableGroupMember"
                ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="SelectableGroupMember" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableGroupMember" Filterable="false" Sortable="true" Title="@Global.Name" Width="80px">
            <Template Context="data">
                <RadzenLink Text="@data.Value.Name" Path="@(urlHelper.GetUrl($"/groups/{data.Value.Id}/children"))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableGroupMember" Property="Value.Description" Filterable="false" Sortable="false" Title="@Global.Description" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableGroupMember" Property="Value.UpdateDateTime" Filterable="false" Sortable="true" FormatString="{0:dd/M/yyyy HH:mm:ss}" SortOrder="SortOrder.Descending" Title="@Global.UpdateDateTime" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableGroupMember" Filterable="false" Sortable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <SidAuthorizeView Roles=@("/groups/manage")>
                    <Authorized>
                        <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
                    </Authorized>
                </SidAuthorizeView>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.Group Group { get; set; }

    bool selectAll = false;

    void ShowMoreContextMenu(SelectableGroupMember group, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = Global.Delete, Value = 1 }
        }, (a) =>
        {
            if (a.Value.Equals(1))
            {
                var fullPathLst = groupsMembersState.Value.Members?.Where(c => c.IsSelected).Select(c => c.Value.FullPath)?.ToList();
                var act = new RemoveSelectedGroupsAction { FullPathLst = fullPathLst };
                dispatcher.Dispatch(act);
                contextMenuService.Close();
            }
        });
    }

    void ToggleChanged(bool isSelected, SelectableGroupMember member)
    {
        var act = new SelectGroupMemberAction { IsSelected = isSelected, MemberId = member.Value.Id };
        dispatcher.Dispatch(act);
    }

    void ToggleAll(bool isSelected)
    {
        var act = new SelectAllGroupMembersAction { IsSelected = isSelected };
        dispatcher.Dispatch(act);
    }

    void RowRender(RowRenderEventArgs<SelectableGroupMember> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    async void AddMember()
    {
        await dialogService.OpenAsync<AddGroupDialog>(Global.AddMember, new Dictionary<string, object>
        {
            { "ParentId", Group.Id }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }
}