//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RegoParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRegoParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RegoParserBaseListener : IRegoParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoot([NotNull] RegoParser.RootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoot([NotNull] RegoParser.RootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmt([NotNull] RegoParser.StmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmt([NotNull] RegoParser.StmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoPackage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegoPackage([NotNull] RegoParser.RegoPackageContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoPackage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegoPackage([NotNull] RegoParser.RegoPackageContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.importDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportDirective([NotNull] RegoParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.importDirective"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportDirective([NotNull] RegoParser.ImportDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoRules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegoRules([NotNull] RegoParser.RegoRulesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoRules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegoRules([NotNull] RegoParser.RegoRulesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleHead"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRuleHead([NotNull] RegoParser.RuleHeadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleHead"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRuleHead([NotNull] RegoParser.RuleHeadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRuleBody([NotNull] RegoParser.RuleBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRuleBody([NotNull] RegoParser.RuleBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleExt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRuleExt([NotNull] RegoParser.RuleExtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleExt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRuleExt([NotNull] RegoParser.RuleExtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegoElse([NotNull] RegoParser.RegoElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoElse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegoElse([NotNull] RegoParser.RegoElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegoBody([NotNull] RegoParser.RegoBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegoBody([NotNull] RegoParser.RegoBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.nonEmptyBraceEnclosedBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNonEmptyBraceEnclosedBody([NotNull] RegoParser.NonEmptyBraceEnclosedBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.nonEmptyBraceEnclosedBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNonEmptyBraceEnclosedBody([NotNull] RegoParser.NonEmptyBraceEnclosedBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuery([NotNull] RegoParser.QueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuery([NotNull] RegoParser.QueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] RegoParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] RegoParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.literalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpr([NotNull] RegoParser.LiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.literalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpr([NotNull] RegoParser.LiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.withKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithKeyword([NotNull] RegoParser.WithKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.withKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithKeyword([NotNull] RegoParser.WithKeywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] RegoParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] RegoParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTermPair([NotNull] RegoParser.ExprTermPairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTermPair([NotNull] RegoParser.ExprTermPairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.termPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTermPair([NotNull] RegoParser.TermPairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.termPair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTermPair([NotNull] RegoParser.TermPairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermPairList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTermPairList([NotNull] RegoParser.ExprTermPairListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermPairList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTermPairList([NotNull] RegoParser.ExprTermPairListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTerm([NotNull] RegoParser.ExprTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTerm([NotNull] RegoParser.ExprTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprTermList([NotNull] RegoParser.ExprTermListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprTermList([NotNull] RegoParser.ExprTermListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.relationExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationExpr([NotNull] RegoParser.RelationExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.relationExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationExpr([NotNull] RegoParser.RelationExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.bitwiseOrExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwiseOrExpr([NotNull] RegoParser.BitwiseOrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.bitwiseOrExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwiseOrExpr([NotNull] RegoParser.BitwiseOrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.bitwiseAndExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitwiseAndExpr([NotNull] RegoParser.BitwiseAndExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.bitwiseAndExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitwiseAndExpr([NotNull] RegoParser.BitwiseAndExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.arithExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArithExpr([NotNull] RegoParser.ArithExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.arithExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArithExpr([NotNull] RegoParser.ArithExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.factorExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFactorExpr([NotNull] RegoParser.FactorExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.factorExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFactorExpr([NotNull] RegoParser.FactorExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] RegoParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] RegoParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.arrayComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayComprehension([NotNull] RegoParser.ArrayComprehensionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.arrayComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayComprehension([NotNull] RegoParser.ArrayComprehensionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.setComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetComprehension([NotNull] RegoParser.SetComprehensionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.setComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetComprehension([NotNull] RegoParser.SetComprehensionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.objectComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectComprehension([NotNull] RegoParser.ObjectComprehensionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.objectComprehension"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectComprehension([NotNull] RegoParser.ObjectComprehensionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.object_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObject_([NotNull] RegoParser.Object_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.object_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObject_([NotNull] RegoParser.Object_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.objectItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectItem([NotNull] RegoParser.ObjectItemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.objectItem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectItem([NotNull] RegoParser.ObjectItemContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.array_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_([NotNull] RegoParser.Array_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.array_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_([NotNull] RegoParser.Array_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.set_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSet_([NotNull] RegoParser.Set_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.set_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSet_([NotNull] RegoParser.Set_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.emptySet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptySet([NotNull] RegoParser.EmptySetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.emptySet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptySet([NotNull] RegoParser.EmptySetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.nonEmptySet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNonEmptySet([NotNull] RegoParser.NonEmptySetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.nonEmptySet"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNonEmptySet([NotNull] RegoParser.NonEmptySetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ref"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRef([NotNull] RegoParser.RefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ref"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRef([NotNull] RegoParser.RefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRefOperand([NotNull] RegoParser.RefOperandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRefOperand([NotNull] RegoParser.RefOperandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperandDot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRefOperandDot([NotNull] RegoParser.RefOperandDotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperandDot"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRefOperandDot([NotNull] RegoParser.RefOperandDotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperandCanonical"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRefOperandCanonical([NotNull] RegoParser.RefOperandCanonicalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperandCanonical"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRefOperandCanonical([NotNull] RegoParser.RefOperandCanonicalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.scalar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScalar([NotNull] RegoParser.ScalarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.scalar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScalar([NotNull] RegoParser.ScalarContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
