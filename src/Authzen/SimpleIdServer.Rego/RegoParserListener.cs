//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RegoParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleIdServer.Rego;

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RegoParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IRegoParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoot([NotNull] RegoParser.RootContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoot([NotNull] RegoParser.RootContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] RegoParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] RegoParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoPackage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegoPackage([NotNull] RegoParser.RegoPackageContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoPackage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegoPackage([NotNull] RegoParser.RegoPackageContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.importDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportDirective([NotNull] RegoParser.ImportDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.importDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportDirective([NotNull] RegoParser.ImportDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegoRules([NotNull] RegoParser.RegoRulesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegoRules([NotNull] RegoParser.RegoRulesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleHead([NotNull] RegoParser.RuleHeadContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleHead([NotNull] RegoParser.RuleHeadContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleBody([NotNull] RegoParser.RuleBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleBody([NotNull] RegoParser.RuleBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ruleExt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRuleExt([NotNull] RegoParser.RuleExtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ruleExt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRuleExt([NotNull] RegoParser.RuleExtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegoElse([NotNull] RegoParser.RegoElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegoElse([NotNull] RegoParser.RegoElseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.regoBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegoBody([NotNull] RegoParser.RegoBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.regoBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegoBody([NotNull] RegoParser.RegoBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.nonEmptyBraceEnclosedBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonEmptyBraceEnclosedBody([NotNull] RegoParser.NonEmptyBraceEnclosedBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.nonEmptyBraceEnclosedBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonEmptyBraceEnclosedBody([NotNull] RegoParser.NonEmptyBraceEnclosedBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuery([NotNull] RegoParser.QueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuery([NotNull] RegoParser.QueryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] RegoParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] RegoParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.literalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] RegoParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.literalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] RegoParser.LiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.withKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithKeyword([NotNull] RegoParser.WithKeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.withKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithKeyword([NotNull] RegoParser.WithKeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] RegoParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] RegoParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTermPair([NotNull] RegoParser.ExprTermPairContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTermPair([NotNull] RegoParser.ExprTermPairContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.termPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTermPair([NotNull] RegoParser.TermPairContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.termPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTermPair([NotNull] RegoParser.TermPairContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermPairList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTermPairList([NotNull] RegoParser.ExprTermPairListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermPairList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTermPairList([NotNull] RegoParser.ExprTermPairListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTerm([NotNull] RegoParser.ExprTermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTerm([NotNull] RegoParser.ExprTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.exprTermList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprTermList([NotNull] RegoParser.ExprTermListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.exprTermList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprTermList([NotNull] RegoParser.ExprTermListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.relationExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationExpr([NotNull] RegoParser.RelationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.relationExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationExpr([NotNull] RegoParser.RelationExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.bitwiseOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseOrExpr([NotNull] RegoParser.BitwiseOrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.bitwiseOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseOrExpr([NotNull] RegoParser.BitwiseOrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.bitwiseAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitwiseAndExpr([NotNull] RegoParser.BitwiseAndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.bitwiseAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitwiseAndExpr([NotNull] RegoParser.BitwiseAndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.arithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithExpr([NotNull] RegoParser.ArithExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.arithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithExpr([NotNull] RegoParser.ArithExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.factorExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactorExpr([NotNull] RegoParser.FactorExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.factorExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactorExpr([NotNull] RegoParser.FactorExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] RegoParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] RegoParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.arrayComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayComprehension([NotNull] RegoParser.ArrayComprehensionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.arrayComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayComprehension([NotNull] RegoParser.ArrayComprehensionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.setComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetComprehension([NotNull] RegoParser.SetComprehensionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.setComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetComprehension([NotNull] RegoParser.SetComprehensionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.objectComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectComprehension([NotNull] RegoParser.ObjectComprehensionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.objectComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectComprehension([NotNull] RegoParser.ObjectComprehensionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.object_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObject_([NotNull] RegoParser.Object_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.object_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObject_([NotNull] RegoParser.Object_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.objectItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectItem([NotNull] RegoParser.ObjectItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.objectItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectItem([NotNull] RegoParser.ObjectItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.array_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray_([NotNull] RegoParser.Array_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.array_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray_([NotNull] RegoParser.Array_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.set_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_([NotNull] RegoParser.Set_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.set_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_([NotNull] RegoParser.Set_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.emptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptySet([NotNull] RegoParser.EmptySetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.emptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptySet([NotNull] RegoParser.EmptySetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.nonEmptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNonEmptySet([NotNull] RegoParser.NonEmptySetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.nonEmptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNonEmptySet([NotNull] RegoParser.NonEmptySetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.ref"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRef([NotNull] RegoParser.RefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.ref"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRef([NotNull] RegoParser.RefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefOperand([NotNull] RegoParser.RefOperandContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefOperand([NotNull] RegoParser.RefOperandContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperandDot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefOperandDot([NotNull] RegoParser.RefOperandDotContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperandDot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefOperandDot([NotNull] RegoParser.RefOperandDotContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.refOperandCanonical"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRefOperandCanonical([NotNull] RegoParser.RefOperandCanonicalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.refOperandCanonical"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRefOperandCanonical([NotNull] RegoParser.RefOperandCanonicalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RegoParser.scalar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalar([NotNull] RegoParser.ScalarContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegoParser.scalar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalar([NotNull] RegoParser.ScalarContext context);
}
