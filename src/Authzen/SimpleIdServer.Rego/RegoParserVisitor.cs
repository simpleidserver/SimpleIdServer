//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RegoParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleIdServer.Rego;

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RegoParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IRegoParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.root"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRoot([NotNull] RegoParser.RootContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmt([NotNull] RegoParser.StmtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.regoPackage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegoPackage([NotNull] RegoParser.RegoPackageContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.importDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportDirective([NotNull] RegoParser.ImportDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.regoRules"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegoRules([NotNull] RegoParser.RegoRulesContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.ruleHead"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRuleHead([NotNull] RegoParser.RuleHeadContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.ruleBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRuleBody([NotNull] RegoParser.RuleBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.ruleExt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRuleExt([NotNull] RegoParser.RuleExtContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.regoElse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegoElse([NotNull] RegoParser.RegoElseContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.regoBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegoBody([NotNull] RegoParser.RegoBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.nonEmptyBraceEnclosedBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonEmptyBraceEnclosedBody([NotNull] RegoParser.NonEmptyBraceEnclosedBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuery([NotNull] RegoParser.QueryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] RegoParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.literalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] RegoParser.LiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.withKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithKeyword([NotNull] RegoParser.WithKeywordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] RegoParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.exprTermPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTermPair([NotNull] RegoParser.ExprTermPairContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.termPair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermPair([NotNull] RegoParser.TermPairContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.exprTermPairList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTermPairList([NotNull] RegoParser.ExprTermPairListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.exprTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTerm([NotNull] RegoParser.ExprTermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.exprTermList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprTermList([NotNull] RegoParser.ExprTermListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.relationExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationExpr([NotNull] RegoParser.RelationExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.bitwiseOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseOrExpr([NotNull] RegoParser.BitwiseOrExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.bitwiseAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBitwiseAndExpr([NotNull] RegoParser.BitwiseAndExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.arithExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithExpr([NotNull] RegoParser.ArithExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.factorExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFactorExpr([NotNull] RegoParser.FactorExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] RegoParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.arrayComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayComprehension([NotNull] RegoParser.ArrayComprehensionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.setComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetComprehension([NotNull] RegoParser.SetComprehensionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.objectComprehension"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectComprehension([NotNull] RegoParser.ObjectComprehensionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.object_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObject_([NotNull] RegoParser.Object_Context context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.objectItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitObjectItem([NotNull] RegoParser.ObjectItemContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.array_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArray_([NotNull] RegoParser.Array_Context context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.set_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSet_([NotNull] RegoParser.Set_Context context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.emptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptySet([NotNull] RegoParser.EmptySetContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.nonEmptySet"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNonEmptySet([NotNull] RegoParser.NonEmptySetContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.ref"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRef([NotNull] RegoParser.RefContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.refOperand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRefOperand([NotNull] RegoParser.RefOperandContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.refOperandDot"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRefOperandDot([NotNull] RegoParser.RefOperandDotContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.refOperandCanonical"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRefOperandCanonical([NotNull] RegoParser.RefOperandCanonicalContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RegoParser.scalar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScalar([NotNull] RegoParser.ScalarContext context);
}
